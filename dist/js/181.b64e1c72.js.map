{"version":3,"file":"js/181.b64e1c72.js","mappings":"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","sources":["webpack://chat-room-app/./node_modules/dayjs/dayjs.min.js","webpack://chat-room-app/./src/views/ChatView.vue?e481","webpack://chat-room-app/./src/views/ChatView.vue","webpack://chat-room-app/./src/components/chats/MessageInfo.vue?f640","webpack://chat-room-app/./src/components/chats/MessageInfo.vue","webpack://chat-room-app/./src/components/chats/MessageContainer.vue?d26f","webpack://chat-room-app/./src/components/chats/MessageContainer.vue","webpack://chat-room-app/./src/components/chats/MessageContainer.vue?c5ac","webpack://chat-room-app/../src/constants.ts","webpack://chat-room-app/../src/assert.ts","webpack://chat-room-app/../src/crypt.ts","webpack://chat-room-app/../src/deepCopy.ts","webpack://chat-room-app/../src/global.ts","webpack://chat-room-app/../src/defaults.ts","webpack://chat-room-app/../src/deferred.ts","webpack://chat-room-app/../src/emulator.ts","webpack://chat-room-app/../src/environment.ts","webpack://chat-room-app/../src/errors.ts","webpack://chat-room-app/../src/json.ts","webpack://chat-room-app/../src/jwt.ts","webpack://chat-room-app/../src/obj.ts","webpack://chat-room-app/../src/query.ts","webpack://chat-room-app/../src/sha1.ts","webpack://chat-room-app/../src/validation.ts","webpack://chat-room-app/../src/utf8.ts","webpack://chat-room-app/../src/compat.ts","webpack://chat-room-app/../../src/component.ts","webpack://chat-room-app/../../src/constants.ts","webpack://chat-room-app/../../src/provider.ts","webpack://chat-room-app/../../src/component_container.ts","webpack://chat-room-app/../../src/logger.ts","webpack://chat-room-app/../../../../../../../../../node_modules/idb/build/wrap-idb-value.js","webpack://chat-room-app/../../../../../../../../../node_modules/idb/build/index.js","webpack://chat-room-app/../../src/platformLoggerService.ts","webpack://chat-room-app/../../src/internal.ts","webpack://chat-room-app/../../src/errors.ts","webpack://chat-room-app/../../src/firebaseApp.ts","webpack://chat-room-app/../../src/api.ts","webpack://chat-room-app/../../src/indexeddb.ts","webpack://chat-room-app/../../src/heartbeatService.ts","webpack://chat-room-app/../../src/registerCoreComponents.ts","webpack://chat-room-app/../../src/index.ts","webpack://chat-room-app/../../index.ts","webpack://chat-room-app/../src/core/version.ts","webpack://chat-room-app/../src/core/storage/DOMStorageWrapper.ts","webpack://chat-room-app/../src/core/storage/MemoryStorage.ts","webpack://chat-room-app/../src/core/storage/storage.ts","webpack://chat-room-app/../src/core/util/util.ts","webpack://chat-room-app/../src/core/AppCheckTokenProvider.ts","webpack://chat-room-app/../src/core/AuthTokenProvider.ts","webpack://chat-room-app/../src/realtime/Constants.ts","webpack://chat-room-app/../src/core/RepoInfo.ts","webpack://chat-room-app/../src/core/stats/StatsCollection.ts","webpack://chat-room-app/../src/core/stats/StatsManager.ts","webpack://chat-room-app/../src/realtime/polling/PacketReceiver.ts","webpack://chat-room-app/../src/realtime/BrowserPollConnection.ts","webpack://chat-room-app/../src/realtime/WebSocketConnection.ts","webpack://chat-room-app/../src/realtime/TransportManager.ts","webpack://chat-room-app/../src/realtime/Connection.ts","webpack://chat-room-app/../src/core/ServerActions.ts","webpack://chat-room-app/../src/core/util/EventEmitter.ts","webpack://chat-room-app/../src/core/util/OnlineMonitor.ts","webpack://chat-room-app/../src/core/util/Path.ts","webpack://chat-room-app/../src/core/util/VisibilityMonitor.ts","webpack://chat-room-app/../src/core/PersistentConnection.ts","webpack://chat-room-app/../src/core/snap/Node.ts","webpack://chat-room-app/../src/core/snap/indexes/Index.ts","webpack://chat-room-app/../src/core/snap/indexes/KeyIndex.ts","webpack://chat-room-app/../src/core/util/SortedMap.ts","webpack://chat-room-app/../src/core/snap/comparators.ts","webpack://chat-room-app/../src/core/snap/snap.ts","webpack://chat-room-app/../src/core/snap/LeafNode.ts","webpack://chat-room-app/../src/core/snap/indexes/PriorityIndex.ts","webpack://chat-room-app/../src/core/snap/childSet.ts","webpack://chat-room-app/../src/core/snap/IndexMap.ts","webpack://chat-room-app/../src/core/snap/ChildrenNode.ts","webpack://chat-room-app/../src/core/snap/nodeFromJSON.ts","webpack://chat-room-app/../src/core/snap/indexes/PathIndex.ts","webpack://chat-room-app/../src/core/snap/indexes/ValueIndex.ts","webpack://chat-room-app/../src/core/view/Change.ts","webpack://chat-room-app/../src/core/view/filter/IndexedFilter.ts","webpack://chat-room-app/../src/core/view/filter/RangedFilter.ts","webpack://chat-room-app/../src/core/view/filter/LimitedFilter.ts","webpack://chat-room-app/../src/core/view/QueryParams.ts","webpack://chat-room-app/../src/core/ReadonlyRestClient.ts","webpack://chat-room-app/../src/core/SnapshotHolder.ts","webpack://chat-room-app/../src/core/SparseSnapshotTree.ts","webpack://chat-room-app/../src/core/stats/StatsListener.ts","webpack://chat-room-app/../src/core/stats/StatsReporter.ts","webpack://chat-room-app/../src/core/operation/Operation.ts","webpack://chat-room-app/../src/core/operation/AckUserWrite.ts","webpack://chat-room-app/../src/core/operation/ListenComplete.ts","webpack://chat-room-app/../src/core/operation/Overwrite.ts","webpack://chat-room-app/../src/core/operation/Merge.ts","webpack://chat-room-app/../src/core/view/CacheNode.ts","webpack://chat-room-app/../src/core/view/EventGenerator.ts","webpack://chat-room-app/../src/core/view/ViewCache.ts","webpack://chat-room-app/../src/core/util/ImmutableTree.ts","webpack://chat-room-app/../src/core/CompoundWrite.ts","webpack://chat-room-app/../src/core/WriteTree.ts","webpack://chat-room-app/../src/core/view/ChildChangeAccumulator.ts","webpack://chat-room-app/../src/core/view/CompleteChildSource.ts","webpack://chat-room-app/../src/core/view/ViewProcessor.ts","webpack://chat-room-app/../src/core/view/View.ts","webpack://chat-room-app/../src/core/SyncPoint.ts","webpack://chat-room-app/../src/core/SyncTree.ts","webpack://chat-room-app/../src/core/util/ServerValues.ts","webpack://chat-room-app/../src/core/util/Tree.ts","webpack://chat-room-app/../src/core/util/validation.ts","webpack://chat-room-app/../src/core/view/EventQueue.ts","webpack://chat-room-app/../src/core/Repo.ts","webpack://chat-room-app/../src/core/util/libs/parser.ts","webpack://chat-room-app/../src/core/util/NextPushId.ts","webpack://chat-room-app/../src/core/view/Event.ts","webpack://chat-room-app/../src/core/view/EventRegistration.ts","webpack://chat-room-app/../src/api/Reference_impl.ts","webpack://chat-room-app/../src/api/Database.ts","webpack://chat-room-app/../src/register.ts","webpack://chat-room-app/../src/api/test_access.ts","webpack://chat-room-app/../src/index.ts","webpack://chat-room-app/./node_modules/uuid/dist/esm-browser/native.js","webpack://chat-room-app/./node_modules/uuid/dist/esm-browser/rng.js","webpack://chat-room-app/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://chat-room-app/./node_modules/uuid/dist/esm-browser/v4.js","webpack://chat-room-app/./src/firebase.ts","webpack://chat-room-app/./src/components/chats/MessageInput.vue?4f9b","webpack://chat-room-app/./src/components/chats/MessageInput.vue","webpack://chat-room-app/./src/components/chats/MessageInput.vue?00fb","webpack://chat-room-app/./src/views/ChatView.vue?fcb5","webpack://chat-room-app/./node_modules/core-js/internals/a-possible-prototype.js","webpack://chat-room-app/./node_modules/core-js/internals/an-instance.js","webpack://chat-room-app/./node_modules/core-js/internals/array-buffer-basic-detection.js","webpack://chat-room-app/./node_modules/core-js/internals/array-buffer-view-core.js","webpack://chat-room-app/./node_modules/core-js/internals/array-from-constructor-and-list.js","webpack://chat-room-app/./node_modules/core-js/internals/array-to-reversed.js","webpack://chat-room-app/./node_modules/core-js/internals/array-with.js","webpack://chat-room-app/./node_modules/core-js/internals/classof.js","webpack://chat-room-app/./node_modules/core-js/internals/correct-prototype-getter.js","webpack://chat-room-app/./node_modules/core-js/internals/define-built-in-accessor.js","webpack://chat-room-app/./node_modules/core-js/internals/dom-exception-constants.js","webpack://chat-room-app/./node_modules/core-js/internals/error-stack-clear.js","webpack://chat-room-app/./node_modules/core-js/internals/function-uncurry-this-accessor.js","webpack://chat-room-app/./node_modules/core-js/internals/inherit-if-required.js","webpack://chat-room-app/./node_modules/core-js/internals/is-big-int-array.js","webpack://chat-room-app/./node_modules/core-js/internals/is-possible-prototype.js","webpack://chat-room-app/./node_modules/core-js/internals/normalize-string-argument.js","webpack://chat-room-app/./node_modules/core-js/internals/object-get-prototype-of.js","webpack://chat-room-app/./node_modules/core-js/internals/object-set-prototype-of.js","webpack://chat-room-app/./node_modules/core-js/internals/to-big-int.js","webpack://chat-room-app/./node_modules/core-js/internals/to-string-tag-support.js","webpack://chat-room-app/./node_modules/core-js/internals/to-string.js","webpack://chat-room-app/./node_modules/core-js/modules/es.typed-array.to-reversed.js","webpack://chat-room-app/./node_modules/core-js/modules/es.typed-array.to-sorted.js","webpack://chat-room-app/./node_modules/core-js/modules/es.typed-array.with.js","webpack://chat-room-app/./node_modules/core-js/modules/web.dom-exception.stack.js"],"sourcesContent":["!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).dayjs=e()}(this,(function(){\"use strict\";var t=1e3,e=6e4,n=36e5,r=\"millisecond\",i=\"second\",s=\"minute\",u=\"hour\",a=\"day\",o=\"week\",c=\"month\",f=\"quarter\",h=\"year\",d=\"date\",l=\"Invalid Date\",$=/^(\\d{4})[-/]?(\\d{1,2})?[-/]?(\\d{0,2})[Tt\\s]*(\\d{1,2})?:?(\\d{1,2})?:?(\\d{1,2})?[.:]?(\\d+)?$/,y=/\\[([^\\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:\"en\",weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),ordinal:function(t){var e=[\"th\",\"st\",\"nd\",\"rd\"],n=t%100;return\"[\"+t+(e[(n-20)%10]||e[n]||e[0])+\"]\"}},m=function(t,e,n){var r=String(t);return!r||r.length>=e?t:\"\"+Array(e+1-r.length).join(n)+t},v={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?\"+\":\"-\")+m(r,2,\"0\")+\":\"+m(i,2,\"0\")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,c),s=n-i<0,u=e.clone().add(r+(s?-1:1),c);return+(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:c,y:h,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:f}[t]||String(t||\"\").toLowerCase().replace(/s$/,\"\")},u:function(t){return void 0===t}},g=\"en\",D={};D[g]=M;var p=\"$isDayjsObject\",S=function(t){return t instanceof _||!(!t||!t[p])},w=function t(e,n,r){var i;if(!e)return g;if(\"string\"==typeof e){var s=e.toLowerCase();D[s]&&(i=s),n&&(D[s]=n,i=s);var u=e.split(\"-\");if(!i&&u.length>1)return t(u[0])}else{var a=e.name;D[a]=e,i=a}return!r&&i&&(g=i),i||!r&&g},O=function(t,e){if(S(t))return t.clone();var n=\"object\"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},b=v;b.l=w,b.i=S,b.w=function(t,e){return O(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=w(t.locale,null,!0),this.parse(t),this.$x=this.$x||t.x||{},this[p]=!0}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(b.u(e))return new Date;if(e instanceof Date)return new Date(e);if(\"string\"==typeof e&&!/Z$/i.test(e)){var r=e.match($);if(r){var i=r[2]-1||0,s=(r[7]||\"0\").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.init()},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},m.$utils=function(){return b},m.isValid=function(){return!(this.$d.toString()===l)},m.isSame=function(t,e){var n=O(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return O(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<O(t)},m.$g=function(t,e,n){return b.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!b.u(e)||e,f=b.p(t),l=function(t,e){var i=b.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},$=function(t,e){return b.w(n.toDate()[t].apply(n.toDate(\"s\"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,v=\"set\"+(this.$u?\"UTC\":\"\");switch(f){case h:return r?l(1,0):l(31,11);case c:return r?l(1,M):l(0,M+1);case o:var g=this.$locale().weekStart||0,D=(y<g?y+7:y)-g;return l(r?m-D:m+(6-D),M);case a:case d:return $(v+\"Hours\",0);case u:return $(v+\"Minutes\",1);case s:return $(v+\"Seconds\",2);case i:return $(v+\"Milliseconds\",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=b.p(t),f=\"set\"+(this.$u?\"UTC\":\"\"),l=(n={},n[a]=f+\"Date\",n[d]=f+\"Date\",n[c]=f+\"Month\",n[h]=f+\"FullYear\",n[u]=f+\"Hours\",n[s]=f+\"Minutes\",n[i]=f+\"Seconds\",n[r]=f+\"Milliseconds\",n)[o],$=o===a?this.$D+(e-this.$W):e;if(o===c||o===h){var y=this.clone().set(d,1);y.$d[l]($),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d}else l&&this.$d[l]($);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[b.p(t)]()},m.add=function(r,f){var d,l=this;r=Number(r);var $=b.p(f),y=function(t){var e=O(l);return b.w(e.date(e.date()+Math.round(t*r)),l)};if($===c)return this.set(c,this.$M+r);if($===h)return this.set(h,this.$y+r);if($===a)return y(1);if($===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[$]||1,m=this.$d.getTime()+r*M;return b.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||l;var r=t||\"YYYY-MM-DDTHH:mm:ssZ\",i=b.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,c=n.months,f=n.meridiem,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].slice(0,s)},d=function(t){return b.s(s%12||12,t,\"0\")},$=f||function(t,e,n){var r=t<12?\"AM\":\"PM\";return n?r.toLowerCase():r};return r.replace(y,(function(t,r){return r||function(t){switch(t){case\"YY\":return String(e.$y).slice(-2);case\"YYYY\":return b.s(e.$y,4,\"0\");case\"M\":return a+1;case\"MM\":return b.s(a+1,2,\"0\");case\"MMM\":return h(n.monthsShort,a,c,3);case\"MMMM\":return h(c,a);case\"D\":return e.$D;case\"DD\":return b.s(e.$D,2,\"0\");case\"d\":return String(e.$W);case\"dd\":return h(n.weekdaysMin,e.$W,o,2);case\"ddd\":return h(n.weekdaysShort,e.$W,o,3);case\"dddd\":return o[e.$W];case\"H\":return String(s);case\"HH\":return b.s(s,2,\"0\");case\"h\":return d(1);case\"hh\":return d(2);case\"a\":return $(s,u,!0);case\"A\":return $(s,u,!1);case\"m\":return String(u);case\"mm\":return b.s(u,2,\"0\");case\"s\":return String(e.$s);case\"ss\":return b.s(e.$s,2,\"0\");case\"SSS\":return b.s(e.$ms,3,\"0\");case\"Z\":return i}return null}(t)||i.replace(\":\",\"\")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,l){var $,y=this,M=b.p(d),m=O(r),v=(m.utcOffset()-this.utcOffset())*e,g=this-m,D=function(){return b.m(y,m)};switch(M){case h:$=D()/12;break;case c:$=D();break;case f:$=D()/3;break;case o:$=(g-v)/6048e5;break;case a:$=(g-v)/864e5;break;case u:$=g/n;break;case s:$=g/e;break;case i:$=g/t;break;default:$=g}return l?$:b.a($)},m.daysInMonth=function(){return this.endOf(c).$D},m.$locale=function(){return D[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=w(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return b.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),k=_.prototype;return O.prototype=k,[[\"$ms\",r],[\"$s\",i],[\"$m\",s],[\"$H\",u],[\"$W\",a],[\"$M\",c],[\"$y\",h],[\"$D\",d]].forEach((function(t){k[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),O.extend=function(t,e){return t.$i||(t(e,_,O),t.$i=!0),O},O.locale=w,O.isDayjs=S,O.unix=function(t){return O(1e3*t)},O.en=D[g],O.Ls=D,O.p={},O}));","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-7a70f648\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"chat-view\" }\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_MessageInfo = _resolveComponent(\"MessageInfo\")!\n  const _component_MessageContainer = _resolveComponent(\"MessageContainer\")!\n  const _component_MessageInput = _resolveComponent(\"MessageInput\")!\n\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createVNode(_component_MessageInfo, { username: $props.username }, null, 8, [\"username\"]),\n    _createVNode(_component_MessageContainer, {\n      messages: $setup.messages,\n      username: $props.username\n    }, null, 8, [\"messages\", \"username\"]),\n    _createVNode(_component_MessageInput, { username: $props.username }, null, 8, [\"username\"])\n  ]))\n}","<template>\n  <div class=\"chat-view\">\n    <MessageInfo :username=\"username\" />\n    <MessageContainer :messages=\"messages\" :username=\"username\" />\n    <MessageInput :username=\"username\" />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport MessageInfo from '../components/chats/MessageInfo.vue'\nimport MessageContainer from '../components/chats/MessageContainer.vue'\nimport MessageInput from '../components/chats/MessageInput.vue'\nimport { onMounted, ref } from 'vue'\nimport { messagesRef } from '../firebase'\nimport { onValue, DataSnapshot } from 'firebase/database'\nimport dayjs from 'dayjs'\n\n\nexport default {\n    props: ['username'],\n    components: { MessageInfo, MessageContainer, MessageInput }, \n    setup() {\n        type Message = {\n            key: string, \n            message: string, \n            username: string, \n            time: string\n        }\n\n        let messages = ref([] as Array<Message>)\n        let loginTimestamp = 0\n\n        onMounted(() => {\n            loginTimestamp = dayjs().unix()\n            onValue(messagesRef, (snapshot: DataSnapshot) => {\n                if (snapshot.exists()) {\n                    let size = 1\n                    snapshot.forEach((item) => {\n                        if (snapshot.size === size && item.key !== null && Number(item.key) >= loginTimestamp) {\n                            messages.value.push(item.val())\n                        }\n                        size++\n                    })\n                }\n            }, (err) => {\n                console.error(err);\n                \n            })\n        })\n        return { messages }\n    }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n    .chat-view {\n        height: 100%;\n        position: relative;\n    }\n</style>","import { defineComponent as _defineComponent } from 'vue'\nimport { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-414f3480\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"info\" }\n\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'MessageInfo',\n  props: {\n    username: {\n        type: String, \n        required: true\n    }\n},\n  setup(__props) {\n\n\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"span\", null, _toDisplayString(__props.username.toUpperCase()), 1)\n  ]))\n}\n}\n\n})","import script from \"./MessageInfo.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./MessageInfo.vue?vue&type=script&lang=ts&setup=true\"\n\nimport \"./MessageInfo.vue?vue&type=style&index=0&id=414f3480&lang=scss&scoped=true\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-414f3480\"]])\n\nexport default __exports__","import { defineComponent as _defineComponent } from 'vue'\nimport { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-55150727\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"message-container\" }\nconst _hoisted_2 = { key: 0 }\nconst _hoisted_3 = { key: 1 }\n\nimport { ref, nextTick, type PropType, watch } from 'vue'\n\n\n    type Message = {\n            key: string, \n            message: string, \n            username: string, \n            time: string\n        }\n    \n    \nexport default /*#__PURE__*/_defineComponent({\n  __name: 'MessageContainer',\n  props: {\n        messages: {\n            type: Array as PropType<Array<Message>>,\n            required: true\n        }, \n        username: {\n            type: String, \n            required: true\n        }\n    },\n  setup(__props) {\n\n    const messageContainer = ref<HTMLInputElement>()\n\n    const props = __props\n\n    watch(props.messages, () => {\n        scrollToEnd()\n    })\n\n    const scrollToEnd = () => {\n        nextTick(() => {\n            messageContainer.value!.scrollTo({ top: messageContainer.value!.offsetHeight})\n        })\n    }\n\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"div\", {\n      class: \"message-block\",\n      ref_key: \"messageContainer\",\n      ref: messageContainer\n    }, [\n      (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(__props.messages, (m) => {\n        return (_openBlock(), _createElementBlock(\"div\", {\n          key: m.key,\n          class: _normalizeClass(m.username === __props.username ? 'user' : 'other-user')\n        }, [\n          (m.username === __props.username)\n            ? (_openBlock(), _createElementBlock(\"span\", _hoisted_2, _toDisplayString(m.message), 1))\n            : _createCommentVNode(\"\", true),\n          (m.username !== __props.username)\n            ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [\n                _createElementVNode(\"span\", null, _toDisplayString(m.username), 1),\n                _createElementVNode(\"span\", null, _toDisplayString(m.message), 1)\n              ]))\n            : _createCommentVNode(\"\", true)\n        ], 2))\n      }), 128))\n    ], 512)\n  ]))\n}\n}\n\n})","<template>\n  <div class=\"message-container\">\n    <div class=\"message-block\" ref=\"messageContainer\">\n        <div \n            v-for=\"m in messages\"\n            :key=\"m.key\"\n            :class=\"m.username === username ? 'user' : 'other-user'\">\n            <span v-if=\"m.username === username\">{{ m.message }}</span>\n            <div v-if=\"m.username !== username\">\n                <span>{{ m.username }}</span>\n                <span>{{ m.message }}</span>\n            </div>\n        </div>\n    </div>\n  </div>\n</template>\n    \n<script lang=\"ts\" setup>\n    import { ref, nextTick, type PropType, watch, defineProps } from 'vue'\n\n\n    type Message = {\n            key: string, \n            message: string, \n            username: string, \n            time: string\n        }\n    \n    const messageContainer = ref<HTMLInputElement>()\n\n    const props = defineProps({\n        messages: {\n            type: Array as PropType<Array<Message>>,\n            required: true\n        }, \n        username: {\n            type: String, \n            required: true\n        }\n    })\n\n    watch(props.messages, () => {\n        scrollToEnd()\n    })\n\n    const scrollToEnd = () => {\n        nextTick(() => {\n            messageContainer.value!.scrollTo({ top: messageContainer.value!.offsetHeight})\n        })\n    }\n\n</script>\n\n<style lang=\"scss\" scoped>\n  // Lightest #DDE6ED\n  // Middle #9DB2BF #526D82\n  // Darkest #27374D\n\n    .message-container {\n        height: 48vh;\n        margin: 0 20px;\n        .message-block {\n            height: 100%;\n            overflow: auto;\n            .user {\n                margin: 15px auto;\n                text-align: end;\n                > span {\n                    background: #27374D;\n                    color: #9DB2BF;\n                    padding: 5px 15px;\n                    border-radius: 20px;\n                    font-size: 1.5rem;\n                }\n            }\n            .other-user {\n                > div {\n                    > span:first-child {\n                        display: block;\n                        color: #526D82;\n                        margin:0 0 3px 3px;\n                        font-size: 1.2rem;\n                    }\n                    > span:last-child {\n                        background: #27374D;\n                        color: #9DB2BF;\n                        padding: 5px 15px;\n                        border-radius: 20px;\n                        font-size: 1.5rem;\n                    }\n                }\n            }\n        }\n    }\n    \n</style>","import script from \"./MessageContainer.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./MessageContainer.vue?vue&type=script&lang=ts&setup=true\"\n\nimport \"./MessageContainer.vue?vue&type=style&index=0&id=55150727&lang=scss&scoped=true\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-55150727\"]])\n\nexport default __exports__","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\n */\n\nexport const CONSTANTS = {\n  /**\n   * @define {boolean} Whether this is the client Node.js SDK.\n   */\n  NODE_CLIENT: false,\n  /**\n   * @define {boolean} Whether this is the Admin Node.js SDK.\n   */\n  NODE_ADMIN: false,\n\n  /**\n   * Firebase SDK Version\n   */\n  SDK_VERSION: '${JSCORE_VERSION}'\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Throws an error if the provided assertion is falsy\n */\nexport const assert = function (assertion: unknown, message: string): void {\n  if (!assertion) {\n    throw assertionError(message);\n  }\n};\n\n/**\n * Returns an Error object suitable for throwing.\n */\nexport const assertionError = function (message: string): Error {\n  return new Error(\n    'Firebase Database (' +\n      CONSTANTS.SDK_VERSION +\n      ') INTERNAL ASSERT FAILED: ' +\n      message\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function (str: string): number[] {\n  // TODO(user): Use native implementations if/when available\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (\n      (c & 0xfc00) === 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function (bytes: number[]): string {\n  // TODO(user): Use native implementations if/when available\n  const out: string[] = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n      );\n    }\n  }\n  return out.join('');\n};\n\ninterface Base64 {\n  byteToCharMap_: { [key: number]: string } | null;\n  charToByteMap_: { [key: string]: number } | null;\n  byteToCharMapWebSafe_: { [key: number]: string } | null;\n  charToByteMapWebSafe_: { [key: string]: number } | null;\n  ENCODED_VALS_BASE: string;\n  readonly ENCODED_VALS: string;\n  readonly ENCODED_VALS_WEBSAFE: string;\n  HAS_NATIVE_SUPPORT: boolean;\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string;\n  encodeString(input: string, webSafe?: boolean): string;\n  decodeString(input: string, webSafe: boolean): string;\n  decodeStringToByteArray(input: string, webSafe: boolean): number[];\n  init_(): void;\n}\n\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\nexport const base64: Base64 = {\n  /**\n   * Maps bytes to characters.\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    const byteToCharMap = webSafe\n      ? this.byteToCharMapWebSafe_!\n      : this.byteToCharMap_!;\n\n    const output = [];\n\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n\n      const outByte1 = byte1 >> 2;\n      const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      let outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param input A string to encode.\n   * @param webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeString(input: string, webSafe?: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param input to decode.\n   * @param webSafe True if we should use the\n   *     alternative alphabet.\n   * @return string representing the decoded value.\n   */\n  decodeString(input: string, webSafe: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param input Input to decode.\n   * @param webSafe True if we should use the web-safe alphabet.\n   * @return bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input: string, webSafe: boolean): number[] {\n    this.init_();\n\n    const charToByteMap = webSafe\n      ? this.charToByteMapWebSafe_!\n      : this.charToByteMap_!;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; ) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw new DecodeBase64StringError();\n      }\n\n      const outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 !== 64) {\n        const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 !== 64) {\n          const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n/**\n * An error encountered while decoding base64 string.\n */\nexport class DecodeBase64StringError extends Error {\n  readonly name = 'DecodeBase64StringError';\n}\n\n/**\n * URL-safe base64 encoding\n */\nexport const base64Encode = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 encoding (without \".\" padding in the end).\n * e.g. Used in JSON Web Token (JWT) parts.\n */\nexport const base64urlEncodeWithoutPadding = function (str: string): string {\n  // Use base64url encoding and remove padding in the end (dot characters).\n  return base64Encode(str).replace(/\\./g, '');\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nexport const base64Decode = function (str: string): string | null {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nexport function deepCopy<T>(value: T): T {\n  return deepExtend(undefined, value) as T;\n}\n\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n *\n * Note: we don't merge __proto__ to prevent prototype pollution\n */\nexport function deepExtend(target: unknown, source: unknown): unknown {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n\n  switch (source.constructor) {\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      const dateValue = source as Date;\n      return new Date(dateValue.getTime());\n\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n      break;\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n\n  for (const prop in source) {\n    // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\n    if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\n      continue;\n    }\n    (target as Record<string, unknown>)[prop] = deepExtend(\n      (target as Record<string, unknown>)[prop],\n      (source as Record<string, unknown>)[prop]\n    );\n  }\n\n  return target;\n}\n\nfunction isValidKey(key: string): boolean {\n  return key !== '__proto__';\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Polyfill for `globalThis` object.\n * @returns the `globalThis` object for the given environment.\n * @public\n */\nexport function getGlobal(): typeof globalThis {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('Unable to locate global object.');\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { getGlobal } from './global';\n\n/**\n * Keys for experimental properties on the `FirebaseDefaults` object.\n * @public\n */\nexport type ExperimentalKey = 'authTokenSyncURL' | 'authIdTokenMaxAge';\n\n/**\n * An object that can be injected into the environment as __FIREBASE_DEFAULTS__,\n * either as a property of globalThis, a shell environment variable, or a\n * cookie.\n *\n * This object can be used to automatically configure and initialize\n * a Firebase app as well as any emulators.\n *\n * @public\n */\nexport interface FirebaseDefaults {\n  config?: Record<string, string>;\n  emulatorHosts?: Record<string, string>;\n  _authTokenSyncURL?: string;\n  _authIdTokenMaxAge?: number;\n  /**\n   * Override Firebase's runtime environment detection and\n   * force the SDK to act as if it were in the specified environment.\n   */\n  forceEnvironment?: 'browser' | 'node';\n  [key: string]: unknown;\n}\n\ndeclare global {\n  // Need `var` for this to work.\n  // eslint-disable-next-line no-var\n  var __FIREBASE_DEFAULTS__: FirebaseDefaults | undefined;\n}\n\nconst getDefaultsFromGlobal = (): FirebaseDefaults | undefined =>\n  getGlobal().__FIREBASE_DEFAULTS__;\n\n/**\n * Attempt to read defaults from a JSON string provided to\n * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in\n * process(.)env(.)__FIREBASE_DEFAULTS_PATH__\n * The dots are in parens because certain compilers (Vite?) cannot\n * handle seeing that variable in comments.\n * See https://github.com/firebase/firebase-js-sdk/issues/6838\n */\nconst getDefaultsFromEnvVariable = (): FirebaseDefaults | undefined => {\n  if (typeof process === 'undefined' || typeof process.env === 'undefined') {\n    return;\n  }\n  const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\n  if (defaultsJsonString) {\n    return JSON.parse(defaultsJsonString);\n  }\n};\n\nconst getDefaultsFromCookie = (): FirebaseDefaults | undefined => {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  let match;\n  try {\n    match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\n  } catch (e) {\n    // Some environments such as Angular Universal SSR have a\n    // `document` object but error on accessing `document.cookie`.\n    return;\n  }\n  const decoded = match && base64Decode(match[1]);\n  return decoded && JSON.parse(decoded);\n};\n\n/**\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\n * (1) if such an object exists as a property of `globalThis`\n * (2) if such an object was provided on a shell environment variable\n * (3) if such an object exists in a cookie\n * @public\n */\nexport const getDefaults = (): FirebaseDefaults | undefined => {\n  try {\n    return (\n      getDefaultsFromGlobal() ||\n      getDefaultsFromEnvVariable() ||\n      getDefaultsFromCookie()\n    );\n  } catch (e) {\n    /**\n     * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due\n     * to any environment case we have not accounted for. Log to\n     * info instead of swallowing so we can find these unknown cases\n     * and add paths for them if needed.\n     */\n    console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);\n    return;\n  }\n};\n\n/**\n * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available\n * @public\n */\nexport const getDefaultEmulatorHost = (\n  productName: string\n): string | undefined => getDefaults()?.emulatorHosts?.[productName];\n\n/**\n * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a pair of hostname and port like `[\"::1\", 4000]` if available\n * @public\n */\nexport const getDefaultEmulatorHostnameAndPort = (\n  productName: string\n): [hostname: string, port: number] | undefined => {\n  const host = getDefaultEmulatorHost(productName);\n  if (!host) {\n    return undefined;\n  }\n  const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.\n  if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {\n    throw new Error(`Invalid host ${host} with no separate hostname and port!`);\n  }\n  // eslint-disable-next-line no-restricted-globals\n  const port = parseInt(host.substring(separatorIndex + 1), 10);\n  if (host[0] === '[') {\n    // Bracket-quoted `[ipv6addr]:port` => return \"ipv6addr\" (without brackets).\n    return [host.substring(1, separatorIndex - 1), port];\n  } else {\n    return [host.substring(0, separatorIndex), port];\n  }\n};\n\n/**\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\n * @public\n */\nexport const getDefaultAppConfig = (): Record<string, string> | undefined =>\n  getDefaults()?.config;\n\n/**\n * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties\n * prefixed by \"_\")\n * @public\n */\nexport const getExperimentalSetting = <T extends ExperimentalKey>(\n  name: T\n): FirebaseDefaults[`_${T}`] =>\n  getDefaults()?.[`_${name}`] as FirebaseDefaults[`_${T}`];\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  reject: (value?: unknown) => void = () => {};\n  resolve: (value?: unknown) => void = () => {};\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve as (value?: unknown) => void;\n      this.reject = reject as (value?: unknown) => void;\n    });\n  }\n\n  /**\n   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\n   */\n  wrapCallback(\n    callback?: (error?: unknown, value?: unknown) => void\n  ): (error: unknown, value?: unknown) => void {\n    return (error, value?) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => {});\n\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64urlEncodeWithoutPadding } from './crypt';\n\n// Firebase Auth tokens contain snake_case claims following the JWT standard / convention.\n/* eslint-disable camelcase */\n\nexport type FirebaseSignInProvider =\n  | 'custom'\n  | 'email'\n  | 'password'\n  | 'phone'\n  | 'anonymous'\n  | 'google.com'\n  | 'facebook.com'\n  | 'github.com'\n  | 'twitter.com'\n  | 'microsoft.com'\n  | 'apple.com';\n\ninterface FirebaseIdToken {\n  // Always set to https://securetoken.google.com/PROJECT_ID\n  iss: string;\n\n  // Always set to PROJECT_ID\n  aud: string;\n\n  // The user's unique ID\n  sub: string;\n\n  // The token issue time, in seconds since epoch\n  iat: number;\n\n  // The token expiry time, normally 'iat' + 3600\n  exp: number;\n\n  // The user's unique ID. Must be equal to 'sub'\n  user_id: string;\n\n  // The time the user authenticated, normally 'iat'\n  auth_time: number;\n\n  // The sign in provider, only set when the provider is 'anonymous'\n  provider_id?: 'anonymous';\n\n  // The user's primary email\n  email?: string;\n\n  // The user's email verification status\n  email_verified?: boolean;\n\n  // The user's primary phone number\n  phone_number?: string;\n\n  // The user's display name\n  name?: string;\n\n  // The user's profile photo URL\n  picture?: string;\n\n  // Information on all identities linked to this user\n  firebase: {\n    // The primary sign-in provider\n    sign_in_provider: FirebaseSignInProvider;\n\n    // A map of providers to the user's list of unique identifiers from\n    // each provider\n    identities?: { [provider in FirebaseSignInProvider]?: string[] };\n  };\n\n  // Custom claims set by the developer\n  [claim: string]: unknown;\n\n  uid?: never; // Try to catch a common mistake of \"uid\" (should be \"sub\" instead).\n}\n\nexport type EmulatorMockTokenOptions = ({ user_id: string } | { sub: string }) &\n  Partial<FirebaseIdToken>;\n\nexport function createMockUserToken(\n  token: EmulatorMockTokenOptions,\n  projectId?: string\n): string {\n  if (token.uid) {\n    throw new Error(\n      'The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.'\n    );\n  }\n  // Unsecured JWTs use \"none\" as the algorithm.\n  const header = {\n    alg: 'none',\n    type: 'JWT'\n  };\n\n  const project = projectId || 'demo-project';\n  const iat = token.iat || 0;\n  const sub = token.sub || token.user_id;\n  if (!sub) {\n    throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\n  }\n\n  const payload: FirebaseIdToken = {\n    // Set all required fields to decent defaults\n    iss: `https://securetoken.google.com/${project}`,\n    aud: project,\n    iat,\n    exp: iat + 3600,\n    auth_time: iat,\n    sub,\n    user_id: sub,\n    firebase: {\n      sign_in_provider: 'custom',\n      identities: {}\n    },\n\n    // Override with user options\n    ...token\n  };\n\n  // Unsecured JWTs use the empty string as a signature.\n  const signature = '';\n  return [\n    base64urlEncodeWithoutPadding(JSON.stringify(header)),\n    base64urlEncodeWithoutPadding(JSON.stringify(payload)),\n    signature\n  ].join('.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\nimport { getDefaults } from './defaults';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string {\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected or specified.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean {\n  const forceEnvironment = getDefaults()?.forceEnvironment;\n  if (forceEnvironment === 'node') {\n    return true;\n  } else if (forceEnvironment === 'browser') {\n    return false;\n  }\n\n  try {\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean {\n  return typeof self === 'object' && self.self === self;\n}\n\n/**\n * Detect browser extensions (Chrome and Firefox at least).\n */\ninterface BrowserRuntime {\n  id?: unknown;\n}\ndeclare const chrome: { runtime?: BrowserRuntime };\ndeclare const browser: { runtime?: BrowserRuntime };\nexport function isBrowserExtension(): boolean {\n  const runtime =\n    typeof chrome === 'object'\n      ? chrome.runtime\n      : typeof browser === 'object'\n      ? browser.runtime\n      : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean {\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/** Detects Electron apps. */\nexport function isElectron(): boolean {\n  return getUA().indexOf('Electron/') >= 0;\n}\n\n/** Detects Internet Explorer. */\nexport function isIE(): boolean {\n  const ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n\n/** Detects Universal Windows Platform apps. */\nexport function isUWP(): boolean {\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n\n/** Returns true if we are running in Safari. */\nexport function isSafari(): boolean {\n  return (\n    !isNode() &&\n    navigator.userAgent.includes('Safari') &&\n    !navigator.userAgent.includes('Chrome')\n  );\n}\n\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nexport function isIndexedDBAvailable(): boolean {\n  try {\n    return typeof indexedDB === 'object';\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n *\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\n * private browsing)\n */\nexport function validateIndexedDBOpenable(): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      let preExist: boolean = true;\n      const DB_CHECK_NAME =\n        'validate-browser-context-for-indexeddb-analytics-module';\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => {\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) {\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n        }\n        resolve(true);\n      };\n      request.onupgradeneeded = () => {\n        preExist = false;\n      };\n\n      request.onerror = () => {\n        reject(request.error?.message || '');\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nexport function areCookiesEnabled(): boolean {\n  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\n    return false;\n  }\n  return true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  /** The custom name for all FirebaseErrors. */\n  readonly name: string = ERROR_NAME;\n\n  constructor(\n    /** The error code for this error. */\n    readonly code: string,\n    message: string,\n    /** Custom data for this error. */\n    public customData?: Record<string, unknown>\n  ) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Evaluates a JSON string into a javascript object.\n *\n * @param {string} str A string containing JSON.\n * @return {*} The javascript object representing the specified JSON.\n */\nexport function jsonEval(str: string): unknown {\n  return JSON.parse(str);\n}\n\n/**\n * Returns JSON representing a javascript object.\n * @param {*} data Javascript object to be stringified.\n * @return {string} The JSON contents of the object.\n */\nexport function stringify(data: unknown): string {\n  return JSON.stringify(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { jsonEval } from './json';\n\ninterface Claims {\n  [key: string]: {};\n}\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token into constituent parts.\n *\n * Notes:\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const decode = function (token: string): DecodedToken {\n  let header = {},\n    claims: Claims = {},\n    data = {},\n    signature = '';\n\n  try {\n    const parts = token.split('.');\n    header = jsonEval(base64Decode(parts[0]) || '') as object;\n    claims = jsonEval(base64Decode(parts[1]) || '') as Claims;\n    signature = parts[2];\n    data = claims['d'] || {};\n    delete claims['d'];\n  } catch (e) {}\n\n  return {\n    header,\n    claims,\n    data,\n    signature\n  };\n};\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidTimestamp = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  const now: number = Math.floor(new Date().getTime() / 1000);\n  let validSince: number = 0,\n    validUntil: number = 0;\n\n  if (typeof claims === 'object') {\n    if (claims.hasOwnProperty('nbf')) {\n      validSince = claims['nbf'] as number;\n    } else if (claims.hasOwnProperty('iat')) {\n      validSince = claims['iat'] as number;\n    }\n\n    if (claims.hasOwnProperty('exp')) {\n      validUntil = claims['exp'] as number;\n    } else {\n      // token will expire after 24h by default\n      validUntil = validSince + 86400;\n    }\n  }\n\n  return (\n    !!now &&\n    !!validSince &&\n    !!validUntil &&\n    now >= validSince &&\n    now <= validUntil\n  );\n};\n\n/**\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\n *\n * Notes:\n * - May return null if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const issuedAtTime = function (token: string): number | null {\n  const claims: Claims = decode(token).claims;\n  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\n    return claims['iat'] as number;\n  }\n  return null;\n};\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidFormat = function (token: string): boolean {\n  const decoded = decode(token),\n    claims = decoded.claims;\n\n  return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\n};\n\n/**\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isAdmin = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  return typeof claims === 'object' && claims['admin'] === true;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function contains<T extends object>(obj: T, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function safeGet<T extends object, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] | undefined {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\nexport function isEmpty(obj: object): obj is {} {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function map<K extends string, V, U>(\n  obj: { [key in K]: V },\n  fn: (value: V, key: K, obj: { [key in K]: V }) => U,\n  contextObj?: unknown\n): { [key in K]: U } {\n  const res: Partial<{ [key in K]: U }> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n    }\n  }\n  return res as { [key in K]: U };\n}\n\n/**\n * Deep equal two objects. Support Arrays and Objects.\n */\nexport function deepEqual(a: object, b: object): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  for (const k of aKeys) {\n    if (!bKeys.includes(k)) {\n      return false;\n    }\n\n    const aProp = (a as Record<string, unknown>)[k];\n    const bProp = (b as Record<string, unknown>)[k];\n    if (isObject(aProp) && isObject(bProp)) {\n      if (!deepEqual(aProp, bProp)) {\n        return false;\n      }\n    } else if (aProp !== bProp) {\n      return false;\n    }\n  }\n\n  for (const k of bKeys) {\n    if (!aKeys.includes(k)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isObject(thing: unknown): thing is object {\n  return thing !== null && typeof thing === 'object';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\n * params object (e.g. {arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n */\nexport function querystring(querystringParams: {\n  [key: string]: string | number;\n}): string {\n  const params = [];\n  for (const [key, value] of Object.entries(querystringParams)) {\n    if (Array.isArray(value)) {\n      value.forEach(arrayVal => {\n        params.push(\n          encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal)\n        );\n      });\n    } else {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  }\n  return params.length ? '&' + params.join('&') : '';\n}\n\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\n * (e.g. {arg: 'val', arg2: 'val2'})\n */\nexport function querystringDecode(querystring: string): Record<string, string> {\n  const obj: Record<string, string> = {};\n  const tokens = querystring.replace(/^\\?/, '').split('&');\n\n  tokens.forEach(token => {\n    if (token) {\n      const [key, value] = token.split('=');\n      obj[decodeURIComponent(key)] = decodeURIComponent(value);\n    }\n  });\n  return obj;\n}\n\n/**\n * Extract the query string part of a URL, including the leading question mark (if present).\n */\nexport function extractQuerystring(url: string): string {\n  const queryStart = url.indexOf('?');\n  if (!queryStart) {\n    return '';\n  }\n  const fragmentStart = url.indexOf('#', queryStart);\n  return url.substring(\n    queryStart,\n    fragmentStart > 0 ? fragmentStart : undefined\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @final\n * @struct\n */\nexport class Sha1 {\n  /**\n   * Holds the previous values of accumulated variables a-e in the compress_\n   * function.\n   * @private\n   */\n  private chain_: number[] = [];\n\n  /**\n   * A buffer holding the partially computed hash result.\n   * @private\n   */\n  private buf_: number[] = [];\n\n  /**\n   * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n   * as the message schedule in the docs.\n   * @private\n   */\n  private W_: number[] = [];\n\n  /**\n   * Contains data needed to pad messages less than 64 bytes.\n   * @private\n   */\n  private pad_: number[] = [];\n\n  /**\n   * @private {number}\n   */\n  private inbuf_: number = 0;\n\n  /**\n   * @private {number}\n   */\n  private total_: number = 0;\n\n  blockSize: number;\n\n  constructor() {\n    this.blockSize = 512 / 8;\n\n    this.pad_[0] = 128;\n    for (let i = 1; i < this.blockSize; ++i) {\n      this.pad_[i] = 0;\n    }\n\n    this.reset();\n  }\n\n  reset(): void {\n    this.chain_[0] = 0x67452301;\n    this.chain_[1] = 0xefcdab89;\n    this.chain_[2] = 0x98badcfe;\n    this.chain_[3] = 0x10325476;\n    this.chain_[4] = 0xc3d2e1f0;\n\n    this.inbuf_ = 0;\n    this.total_ = 0;\n  }\n\n  /**\n   * Internal compress helper function.\n   * @param buf Block to compress.\n   * @param offset Offset of the block in the buffer.\n   * @private\n   */\n  compress_(buf: number[] | Uint8Array | string, offset?: number): void {\n    if (!offset) {\n      offset = 0;\n    }\n\n    const W = this.W_;\n\n    // get 16 big endian words\n    if (typeof buf === 'string') {\n      for (let i = 0; i < 16; i++) {\n        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n        // have a bug that turns the post-increment ++ operator into pre-increment\n        // during JIT compilation.  We have code that depends heavily on SHA-1 for\n        // correctness and which is affected by this bug, so I've removed all uses\n        // of post-increment ++ in which the result value is used.  We can revert\n        // this change once the Safari bug\n        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n        // most clients have been updated.\n        W[i] =\n          (buf.charCodeAt(offset) << 24) |\n          (buf.charCodeAt(offset + 1) << 16) |\n          (buf.charCodeAt(offset + 2) << 8) |\n          buf.charCodeAt(offset + 3);\n        offset += 4;\n      }\n    } else {\n      for (let i = 0; i < 16; i++) {\n        W[i] =\n          (buf[offset] << 24) |\n          (buf[offset + 1] << 16) |\n          (buf[offset + 2] << 8) |\n          buf[offset + 3];\n        offset += 4;\n      }\n    }\n\n    // expand to 80 words\n    for (let i = 16; i < 80; i++) {\n      const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n      W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\n    }\n\n    let a = this.chain_[0];\n    let b = this.chain_[1];\n    let c = this.chain_[2];\n    let d = this.chain_[3];\n    let e = this.chain_[4];\n    let f, k;\n\n    // TODO(user): Try to unroll this loop to speed up the computation.\n    for (let i = 0; i < 80; i++) {\n      if (i < 40) {\n        if (i < 20) {\n          f = d ^ (b & (c ^ d));\n          k = 0x5a827999;\n        } else {\n          f = b ^ c ^ d;\n          k = 0x6ed9eba1;\n        }\n      } else {\n        if (i < 60) {\n          f = (b & c) | (d & (b | c));\n          k = 0x8f1bbcdc;\n        } else {\n          f = b ^ c ^ d;\n          k = 0xca62c1d6;\n        }\n      }\n\n      const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\n      e = d;\n      d = c;\n      c = ((b << 30) | (b >>> 2)) & 0xffffffff;\n      b = a;\n      a = t;\n    }\n\n    this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\n    this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\n    this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\n    this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\n    this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\n  }\n\n  update(bytes?: number[] | Uint8Array | string, length?: number): void {\n    // TODO(johnlenz): tighten the function signature and remove this check\n    if (bytes == null) {\n      return;\n    }\n\n    if (length === undefined) {\n      length = bytes.length;\n    }\n\n    const lengthMinusBlock = length - this.blockSize;\n    let n = 0;\n    // Using local instead of member variables gives ~5% speedup on Firefox 16.\n    const buf = this.buf_;\n    let inbuf = this.inbuf_;\n\n    // The outer while loop should execute at most twice.\n    while (n < length) {\n      // When we have no data in the block to top up, we can directly process the\n      // input buffer (assuming it contains sufficient data). This gives ~25%\n      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n      // the data is provided in large chunks (or in multiples of 64 bytes).\n      if (inbuf === 0) {\n        while (n <= lengthMinusBlock) {\n          this.compress_(bytes, n);\n          n += this.blockSize;\n        }\n      }\n\n      if (typeof bytes === 'string') {\n        while (n < length) {\n          buf[inbuf] = bytes.charCodeAt(n);\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      } else {\n        while (n < length) {\n          buf[inbuf] = bytes[n];\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      }\n    }\n\n    this.inbuf_ = inbuf;\n    this.total_ += length;\n  }\n\n  /** @override */\n  digest(): number[] {\n    const digest: number[] = [];\n    let totalBits = this.total_ * 8;\n\n    // Add pad 0x80 0x00*.\n    if (this.inbuf_ < 56) {\n      this.update(this.pad_, 56 - this.inbuf_);\n    } else {\n      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n    }\n\n    // Add # bits.\n    for (let i = this.blockSize - 1; i >= 56; i--) {\n      this.buf_[i] = totalBits & 255;\n      totalBits /= 256; // Don't use bit-shifting here!\n    }\n\n    this.compress_(this.buf_);\n\n    let n = 0;\n    for (let i = 0; i < 5; i++) {\n      for (let j = 24; j >= 0; j -= 8) {\n        digest[n] = (this.chain_[i] >> j) & 255;\n        ++n;\n      }\n    }\n    return digest;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param fnName The function name\n * @param minCount The minimum number of arguments to allow for the function call\n * @param maxCount The maximum number of argument to allow for the function call\n * @param argCount The actual number of arguments provided.\n */\nexport const validateArgCount = function (\n  fnName: string,\n  minCount: number,\n  maxCount: number,\n  argCount: number\n): void {\n  let argError;\n  if (argCount < minCount) {\n    argError = 'at least ' + minCount;\n  } else if (argCount > maxCount) {\n    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n  }\n  if (argError) {\n    const error =\n      fnName +\n      ' failed: Was called with ' +\n      argCount +\n      (argCount === 1 ? ' argument.' : ' arguments.') +\n      ' Expects ' +\n      argError +\n      '.';\n    throw new Error(error);\n  }\n};\n\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param fnName The function name\n * @param argName The name of the argument\n * @return The prefix to add to the error thrown for validation.\n */\nexport function errorPrefix(fnName: string, argName: string): string {\n  return `${fnName} failed: ${argName} argument `;\n}\n\n/**\n * @param fnName\n * @param argumentNumber\n * @param namespace\n * @param optional\n */\nexport function validateNamespace(\n  fnName: string,\n  namespace: string,\n  optional: boolean\n): void {\n  if (optional && !namespace) {\n    return;\n  }\n  if (typeof namespace !== 'string') {\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(\n      errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.'\n    );\n  }\n}\n\nexport function validateCallback(\n  fnName: string,\n  argumentName: string,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback: Function,\n  optional: boolean\n): void {\n  if (optional && !callback) {\n    return;\n  }\n  if (typeof callback !== 'function') {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid function.'\n    );\n  }\n}\n\nexport function validateContextObject(\n  fnName: string,\n  argumentName: string,\n  context: unknown,\n  optional: boolean\n): void {\n  if (optional && !context) {\n    return;\n  }\n  if (typeof context !== 'object' || context === null) {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid context object.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from './assert';\n\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n\n/**\n * @param {string} str\n * @return {Array}\n */\nexport const stringToByteArray = function (str: string): number[] {\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n\n    // Is this the lead surrogate in a surrogate pair?\n    if (c >= 0xd800 && c <= 0xdbff) {\n      const high = c - 0xd800; // the high 10 bits.\n      i++;\n      assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n      const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n      c = 0x10000 + (high << 10) + low;\n    }\n\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (c < 65536) {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Calculate length without actually converting; useful for doing cheaper validation.\n * @param {string} str\n * @return {number}\n */\nexport const stringLength = function (str: string): number {\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c < 128) {\n      p++;\n    } else if (c < 2048) {\n      p += 2;\n    } else if (c >= 0xd800 && c <= 0xdbff) {\n      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n      p += 4;\n      i++; // skip trail surrogate.\n    } else {\n      p += 3;\n    }\n  }\n  return p;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Compat<T> {\n  _delegate: T;\n}\n\nexport function getModularInstance<ExpService>(\n  service: Compat<ExpService> | ExpService\n): ExpService {\n  if (service && (service as Compat<ExpService>)._delegate) {\n    return (service as Compat<ExpService>)._delegate;\n  } else {\n    return service as ExpService;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  NO_OPTIONS = 'no-options',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument',\n  IDB_OPEN = 'idb-open',\n  IDB_GET = 'idb-get',\n  IDB_WRITE = 'idb-set',\n  IDB_DELETE = 'idb-delete'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call initializeApp() first',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.NO_OPTIONS]:\n    'Need to provide options, when not being deployed to hosting via source.',\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.',\n  [AppError.IDB_OPEN]:\n    'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_GET]:\n    'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_WRITE]:\n    'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_DELETE]:\n    'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n  [AppError.IDB_OPEN]: { originalErrorMessage?: string };\n  [AppError.IDB_GET]: { originalErrorMessage?: string };\n  [AppError.IDB_WRITE]: { originalErrorMessage?: string };\n  [AppError.IDB_DELETE]: { originalErrorMessage?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  private readonly _options: FirebaseOptions;\n  private readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  private _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  private checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { _apps, _components, _registerComponent } from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport { deepEqual, getDefaultAppConfig } from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @public\n */\nexport function initializeApp(): FirebaseApp;\nexport function initializeApp(\n  _options?: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  let options = _options;\n\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  options ||= getDefaultAppConfig();\n\n  if (!options) {\n    throw ERROR_FACTORY.create(AppError.NO_OPTIONS);\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app && name === DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {\n    return initializeApp();\n  }\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  const name = app.name;\n  if (_apps.has(name)) {\n    _apps.delete(name);\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\nimport { logger } from './logger';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            try {\n              db.createObjectStore(STORE_NAME);\n            } catch (e) {\n              // Safari/iOS browsers throw occasional exceptions on\n              // db.createObjectStore() that may be a bug. Avoid blocking\n              // the rest of the app functionality.\n              console.warn(e);\n            }\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.IDB_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    const result = await db\n      .transaction(STORE_NAME)\n      .objectStore(STORE_NAME)\n      .get(computeKey(app));\n    return result;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_GET, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    await tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_WRITE, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\n\nconst MAX_HEADER_BYTES = 1024;\n// 30 days\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (hearbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    const platformLogger = this.container\n      .getProvider('platform-logger')\n      .getImmediate();\n\n    // This is the \"Firebase user agent\" string from the platform logger\n    // service, not the browser user agent.\n    const agent = platformLogger.getPlatformInfoString();\n    const date = getUTCDateString();\n    if (this._heartbeatsCache?.heartbeats == null) {\n      this._heartbeatsCache = await this._heartbeatsCachePromise;\n      // If we failed to construct a heartbeats cache, then return immediately.\n      if (this._heartbeatsCache?.heartbeats == null) {\n        return;\n      }\n    }\n    // Do not store a heartbeat if one is already stored for this day\n    // or if a header has already been sent today.\n    if (\n      this._heartbeatsCache.lastSentHeartbeatDate === date ||\n      this._heartbeatsCache.heartbeats.some(\n        singleDateHeartbeat => singleDateHeartbeat.date === date\n      )\n    ) {\n      return;\n    } else {\n      // There is no entry for this date. Create one.\n      this._heartbeatsCache.heartbeats.push({ date, agent });\n    }\n    // Remove entries older than 30 days.\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(\n      singleDateHeartbeat => {\n        const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n        const now = Date.now();\n        return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n      }\n    );\n    return this._storage.overwrite(this._heartbeatsCache);\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    if (this._heartbeatsCache === null) {\n      await this._heartbeatsCachePromise;\n    }\n    // If it's still null or the array is empty, there is no data to send.\n    if (\n      this._heartbeatsCache?.heartbeats == null ||\n      this._heartbeatsCache.heartbeats.length === 0\n    ) {\n      return '';\n    }\n    const date = getUTCDateString();\n    // Extract as many heartbeats from the cache as will fit under the size limit.\n    const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n      this._heartbeatsCache.heartbeats\n    );\n    const headerString = base64urlEncodeWithoutPadding(\n      JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n    );\n    // Store last sent date to prevent another being logged/sent for the same day.\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\n    if (unsentEntries.length > 0) {\n      // Store any unsent entries if they exist.\n      this._heartbeatsCache.heartbeats = unsentEntries;\n      // This seems more likely than emptying the array (below) to lead to some odd state\n      // since the cache isn't empty and this will be called again on the next request,\n      // and is probably safest if we await it.\n      await this._storage.overwrite(this._heartbeatsCache);\n    } else {\n      this._heartbeatsCache.heartbeats = [];\n      // Do not wait for this, to reduce latency.\n      void this._storage.overwrite(this._heartbeatsCache);\n    }\n    return headerString;\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      if (idbHeartbeatObject?.heartbeats) {\n        return idbHeartbeatObject;\n      } else {\n        return { heartbeats: [] };\n      }\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerServiceImpl } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\nimport { HeartbeatServiceImpl } from './heartbeatService';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n  _registerComponent(\n    new Component(\n      'heartbeat',\n      container => new HeartbeatServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n","/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport * from './api';\nexport * from './internal';\nexport * from './public-types';\n\nregisterCoreComponents('__RUNTIME_ENV__');\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nregisterVersion(name, version, 'app');\nexport * from '@firebase/app';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n  if (\n    typeof timeout === 'number' &&\n    // @ts-ignore Is only defined in Deno environments.\n    typeof Deno !== 'undefined' &&\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno['unrefTimer']\n  ) {\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno.unrefTimer(timeout);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } else if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false,\n    public readonly isUsingEmulator: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\n      this.myIFrame.doc.body.textContent = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APPLICATION_ID_PARAM,\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken,\n      applicationId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string,\n    applicationId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      let options: { [k: string]: object };\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        options = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n      }\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  // Keeps track of whether the TransportManager has already chosen a transport to use\n  static globalTransportInitialized_ = false;\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n   * TransportManager has already set up transports_\n   */\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        const handshakePayload = {\n          ...(payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          })\n        };\n        if (this.repoInfo_.isUsingEmulator) {\n          // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\n          handshakePayload.h = this.repoInfo_.host;\n        }\n        this.onHandshake_(handshakePayload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      `listen() called twice for same path/queryId.`\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  private startIsInclusive_: boolean;\n\n  private endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    const isWithinStart = this.startIsInclusive_\n      ? this.index_.compare(this.getStartPost(), node) <= 0\n      : this.index_.compare(this.getStartPost(), node) < 0;\n    const isWithinEnd = this.endIsInclusive_\n      ? this.index_.compare(node, this.getEndPost()) <= 0\n      : this.index_.compare(node, this.getEndPost()) < 0;\n    return isWithinStart && isWithinEnd;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  private readonly startIsInclusive_: boolean;\n\n  private readonly endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          if (!this.withinDirectionalStart(next)) {\n            // if we have not reached the start, skip to the next element\n            continue;\n          } else if (!this.withinDirectionalEnd(next)) {\n            // if we have reached the end, stop adding elements\n            break;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n        }\n\n        let count = 0;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          const inRange =\n            count < this.limit_ &&\n            this.withinDirectionalStart(next) &&\n            this.withinDirectionalEnd(next);\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n\n  private withinDirectionalStart = (node: NamedNode) =>\n    this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\n\n  private withinDirectionalEnd = (node: NamedNode) =>\n    this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\n\n  private withinStartPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      this.rangedFilter_.getStartPost(),\n      node\n    );\n    return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n\n  private withinEndPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      node,\n      this.rangedFilter_.getEndPost()\n    );\n    return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_START_IS_INCLUSIVE = 'sin',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  INDEX_END_IS_INCLUSIVE = 'ein',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AFTER = 'startAfter',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  END_BEFORE = 'endBefore',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false; // can only be true if startSet_ is true\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false; // can only be true if endSet_ is true\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.startAfterSet_ = this.startAfterSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.endBeforeSet_ = this.endBeforeSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    const startParam = queryParams.startAfterSet_\n      ? REST_QUERY_CONSTANTS.START_AFTER\n      : REST_QUERY_CONSTANTS.START_AT;\n    qs[startParam] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[startParam] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    const endParam = queryParams.endBeforeSet_\n      ? REST_QUERY_CONSTANTS.END_BEFORE\n      : REST_QUERY_CONSTANTS.END_AT;\n    qs[endParam] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[endParam] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE] =\n      !queryParams.startAfterSet_;\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE] =\n      !queryParams.endBeforeSet_;\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree: ImmutableTree<Node>;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === null;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\nexport function resetSyncTreeTag() {\n  syncTreeNextQueryTag_ = 1;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\n *  deduping needs to take place. This flag allows toggling of that behavior\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error,\n  skipListenerDedup = false\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n\n    if (!skipListenerDedup) {\n      /**\n       * We may have just removed one of many listeners and can short-circuit this whole process\n       * We may also not have removed a default listener, in which case all of the descendant listeners should already be\n       * properly set up.\n       */\n\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => {\n          return query._queryParams.loadsAllData();\n        });\n      const covered = syncTree.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) =>\n          syncPointHasCompleteView(parentSyncPoint)\n      );\n\n      if (removingDefault && !covered) {\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.query;\n            const listener = syncTreeCreateListenerForView_(syncTree, view);\n            syncTree.listenProvider_.startListening(\n              syncTreeQueryForListening_(newQuery),\n              syncTreeTagForQuery(syncTree, newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        }\n        // Otherwise there's nothing below us, so nothing we need to start listening on\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: QueryContext) => {\n            const tagToRemove = syncTree.queryToTagMap.get(\n              syncTreeMakeQueryKey_(queryToRemove)\n            );\n            syncTree.listenProvider_.stopListening(\n              syncTreeQueryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  skipSetupListener = false\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nexport function syncTreeTagForQuery(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { ValueEventRegistration } from '../api/Reference_impl';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration,\n  syncTreeTagForQuery\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will wait until the\n *  repo has established a connection and then request the value for `query`.\n * If the client is not able to retrieve the query result for another reason,\n * it reports an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: ValueEventRegistration\n): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload).withIndex(\n        query._queryParams.getIndex()\n      );\n      /**\n       * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\n       * Add an event registration,\n       * Update data at the path,\n       * Raise any events,\n       * Cleanup the SyncTree\n       */\n      syncTreeAddEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        true\n      );\n      let events: Event[];\n      if (query._queryParams.loadsAllData()) {\n        events = syncTreeApplyServerOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node\n        );\n      } else {\n        const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n        events = syncTreeApplyTaggedQueryOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node,\n          tag\n        );\n      }\n      /*\n       * We need to raise events in the scenario where `get()` is called at a parent path, and\n       * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\n       * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\n       * and its corresponding serverCache, including the child location where `onValue` is called. Then,\n       * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\n       * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\n       * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\n       * ensure the corresponding child events will get fired.\n       */\n      eventQueueRaiseEventsForChangedPath(\n        repo.eventQueue_,\n        query._path,\n        events\n      );\n      syncTreeRemoveEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        null,\n        true\n      );\n      return node;\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly,\n      nodeAdmin,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../api/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../api/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n * to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n *\n * @internal\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathChild,\n  pathParent,\n  pathToUrlEncodedString,\n  pathIsEmpty\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `IteratedDataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: IteratedDataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n\n/**\n * Represents a child snapshot of a `Reference` that is being iterated over. The key will never be undefined.\n */\nexport interface IteratedDataSnapshot extends DataSnapshot {\n  key: string; // key of the location of this snapshot.\n}\n\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  const callbackContext = new CallbackContext(() => {});\n  const container = new ValueEventRegistration(callbackContext);\n  return repoGetValue(query._repo, query, container).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value less than or equal\n * to the specified value and a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  warn,\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { TransportManager } from '../realtime/TransportManager';\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\n\nimport { ReferenceImpl } from './Reference_impl';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams,\n    /*isUsingEmulator=*/ true\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn(\n      'Transport has already been initialized. Please call this function before calling ref or setting up a listener'\n    );\n  }\n}\n\n/**\n * Force the use of websockets instead of longPolling.\n */\nexport function forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nexport function forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  const db = _getProvider(app, 'database').getImmediate({\n    identifier: url\n  }) as Database;\n  if (!db._instanceStarted) {\n    const emulator = getDefaultEmulatorHostnameAndPort('database');\n    if (emulator) {\n      connectDatabaseEmulator(db, ...emulator);\n    }\n  }\n  return db;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * Firebase Realtime Database\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Database } from './api/Database';\nimport { registerDatabase } from './register';\n\nexport * from './api';\n\nregisterDatabase();\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'database': Database;\n  }\n}\n","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import { initializeApp } from \"firebase/app\";\nimport { getDatabase, ref, set } from 'firebase/database'\nimport { v4 as uuidv4 } from 'uuid';\nimport dayjs from 'dayjs'\n\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDmMU1MKU9fJh_sONrL8qdrB6wI6YaOjKk\",\n  authDomain: \"chatroom-50ce8.firebaseapp.com\",\n  databaseURL: \"https://chatroom-50ce8-default-rtdb.asia-southeast1.firebasedatabase.app\",\n  projectId: \"chatroom-50ce8\",\n  storageBucket: \"chatroom-50ce8.appspot.com\",\n  messagingSenderId: \"792265184022\",\n  appId: \"1:792265184022:web:6d482ca47abc1f73bc7637\",\n  measurementId: \"G-YP5X9XY2VY\"\n};\n\n// databaseURL: 'https://chatroom-50ce8-default-rtdb.asia-southeast1.firebasedatabase.app'\n\n// Initialise Firebase\nconst app = initializeApp(firebaseConfig);\n// Initialise realtime db and get a reference to the service\nexport const db = getDatabase(app)\nexport const messagesRef = ref(db, \"messages\")\n\nexport const writeUserData = (username: string, message: string) => {\n    set(ref(db, `messages/${dayjs().unix()}`), {\n        key: uuidv4(),\n        username,\n        message,\n        time: dayjs().unix()\n    })\n}","import { defineComponent as _defineComponent } from 'vue'\nimport { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-b37d2832\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"send-message\" }\nconst _hoisted_2 = [\"disabled\"]\nconst _hoisted_3 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", null, \"Send\", -1))\nconst _hoisted_4 = [\n  _hoisted_3\n]\n\nimport { ref } from 'vue'\n    import { writeUserData } from '../../firebase'\n\n    \nexport default /*#__PURE__*/_defineComponent({\n  __name: 'MessageInput',\n  props: {\n        username: {\n            type: String, \n            required: true\n        }\n    },\n  setup(__props) {\n\n    const messageInput = ref<HTMLInputElement>()\n\n    const msg = ref('')\n    const loading = ref(false)\n    const sendController = ref(true)\n\n    const props = __props\n\n    const send = () => {\n        try {\n            sendController.value = false\n            writeUserData(props.username, msg.value)\n            setTimeout(() => {\n                sendController.value = true\n            }, 800)\n            msg.value = ''\n        } catch (err) {\n            console.log(`error: ${err}`);\n            \n        }\n        toFocusMessageInput()\n    }\n\n    const toFocusMessageInput = () => {\n        messageInput.value?.focus()\n    }\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _withDirectives(_createElementVNode(\"textarea\", {\n      name: \"messageInput\",\n      placeholder: \"Send message...\",\n      ref_key: \"messageInput\",\n      ref: messageInput,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((msg).value = $event))\n    }, null, 512), [\n      [_vModelText, msg.value]\n    ]),\n    _createElementVNode(\"button\", {\n      disabled: msg.value === '' || !sendController.value,\n      onClick: _cache[1] || (_cache[1] = ($event: any) => (send()))\n    }, _hoisted_4, 8, _hoisted_2)\n  ]))\n}\n}\n\n})","<template>\n  <div class=\"send-message\">\n    <textarea name=\"messageInput\" placeholder=\"Send message...\" ref=\"messageInput\" v-model=\"msg\"></textarea>\n    <button :disabled=\"msg === '' || !sendController\" @click=\"send()\"><span>Send</span></button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\n    import { ref, defineProps } from 'vue'\n    import { writeUserData } from '../../firebase'\n\n    const messageInput = ref<HTMLInputElement>()\n\n    const msg = ref('')\n    const loading = ref(false)\n    const sendController = ref(true)\n\n    const props = defineProps({\n        username: {\n            type: String, \n            required: true\n        }\n    })\n\n    const send = () => {\n        try {\n            sendController.value = false\n            writeUserData(props.username, msg.value)\n            setTimeout(() => {\n                sendController.value = true\n            }, 800)\n            msg.value = ''\n        } catch (err) {\n            console.log(`error: ${err}`);\n            \n        }\n        toFocusMessageInput()\n    }\n\n    const toFocusMessageInput = () => {\n        messageInput.value?.focus()\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    // Lightest #DDE6ED\n    // Middle #9DB2BF #526D82\n    // Darkest #27374D\n    .send-message {\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        margin: 20px;\n        width: 100%;\n        > textarea, >textarea:focus {\n            width: 75%;\n            background: #DDE6ED;\n            color: #27374D;\n            border: none;\n            border-radius: 10px;\n            outline: none;\n            font-size: 1rem;\n            padding: 10px;\n            font-weight: bold;\n            overflow: auto;\n        }\n        > button {\n            position: absolute;\n            bottom: 10px;\n            right: 10px;\n            width: 6rem;\n            height: 3rem;\n            margin: 0 20px;\n            font-weight: bolder;\n            border: none;\n            border-radius: 10px;\n            background: #27374D;\n            > span {\n                padding: 0 10px;\n                font-size: 1rem;\n                color: #DDE6ED;\n            } \n        }\n    }\n    @media (max-width: 1200px) {\n        .send-message {\n        margin: 15px;\n        width: 100%;\n        bottom: 5px;\n        > textarea, >textarea:focus {\n            width: 60%;\n            font-size: 0.8rem;\n            padding: 8px;\n        }\n        > button {\n            position: absolute;\n            bottom: 7px;\n            right: 7px;\n            width: 3rem;\n            height: 2.5rem;\n            margin: 0 15px;\n            > span {\n                padding: 0;\n                font-size: 0.8rem;\n            } \n        }\n    }\n    }\n</style>","import script from \"./MessageInput.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./MessageInput.vue?vue&type=script&lang=ts&setup=true\"\n\nimport \"./MessageInput.vue?vue&type=style&index=0&id=b37d2832&lang=scss&scoped=true\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-b37d2832\"]])\n\nexport default __exports__","import { render } from \"./ChatView.vue?vue&type=template&id=7a70f648&scoped=true&ts=true\"\nimport script from \"./ChatView.vue?vue&type=script&lang=ts\"\nexport * from \"./ChatView.vue?vue&type=script&lang=ts\"\n\nimport \"./ChatView.vue?vue&type=style&index=0&id=7a70f648&lang=scss&scoped=true\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-7a70f648\"]])\n\nexport default __exports__","'use strict';\nvar isPossiblePrototype = require('../internals/is-possible-prototype');\n\nvar $String = String;\nvar $TypeError = TypeError;\n\nmodule.exports = function (argument) {\n  if (isPossiblePrototype(argument)) return argument;\n  throw new $TypeError(\"Can't set \" + $String(argument) + ' as a prototype');\n};\n","'use strict';\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\n\nvar $TypeError = TypeError;\n\nmodule.exports = function (it, Prototype) {\n  if (isPrototypeOf(Prototype, it)) return it;\n  throw new $TypeError('Incorrect invocation');\n};\n","'use strict';\n// eslint-disable-next-line es/no-typed-arrays -- safe\nmodule.exports = typeof ArrayBuffer != 'undefined' && typeof DataView != 'undefined';\n","'use strict';\nvar NATIVE_ARRAY_BUFFER = require('../internals/array-buffer-basic-detection');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar global = require('../internals/global');\nvar isCallable = require('../internals/is-callable');\nvar isObject = require('../internals/is-object');\nvar hasOwn = require('../internals/has-own-property');\nvar classof = require('../internals/classof');\nvar tryToString = require('../internals/try-to-string');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar defineBuiltIn = require('../internals/define-built-in');\nvar defineBuiltInAccessor = require('../internals/define-built-in-accessor');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar uid = require('../internals/uid');\nvar InternalStateModule = require('../internals/internal-state');\n\nvar enforceInternalState = InternalStateModule.enforce;\nvar getInternalState = InternalStateModule.get;\nvar Int8Array = global.Int8Array;\nvar Int8ArrayPrototype = Int8Array && Int8Array.prototype;\nvar Uint8ClampedArray = global.Uint8ClampedArray;\nvar Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;\nvar TypedArray = Int8Array && getPrototypeOf(Int8Array);\nvar TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);\nvar ObjectPrototype = Object.prototype;\nvar TypeError = global.TypeError;\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');\nvar TYPED_ARRAY_CONSTRUCTOR = 'TypedArrayConstructor';\n// Fixing native typed arrays in Opera Presto crashes the browser, see #595\nvar NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf && classof(global.opera) !== 'Opera';\nvar TYPED_ARRAY_TAG_REQUIRED = false;\nvar NAME, Constructor, Prototype;\n\nvar TypedArrayConstructorsList = {\n  Int8Array: 1,\n  Uint8Array: 1,\n  Uint8ClampedArray: 1,\n  Int16Array: 2,\n  Uint16Array: 2,\n  Int32Array: 4,\n  Uint32Array: 4,\n  Float32Array: 4,\n  Float64Array: 8\n};\n\nvar BigIntArrayConstructorsList = {\n  BigInt64Array: 8,\n  BigUint64Array: 8\n};\n\nvar isView = function isView(it) {\n  if (!isObject(it)) return false;\n  var klass = classof(it);\n  return klass === 'DataView'\n    || hasOwn(TypedArrayConstructorsList, klass)\n    || hasOwn(BigIntArrayConstructorsList, klass);\n};\n\nvar getTypedArrayConstructor = function (it) {\n  var proto = getPrototypeOf(it);\n  if (!isObject(proto)) return;\n  var state = getInternalState(proto);\n  return (state && hasOwn(state, TYPED_ARRAY_CONSTRUCTOR)) ? state[TYPED_ARRAY_CONSTRUCTOR] : getTypedArrayConstructor(proto);\n};\n\nvar isTypedArray = function (it) {\n  if (!isObject(it)) return false;\n  var klass = classof(it);\n  return hasOwn(TypedArrayConstructorsList, klass)\n    || hasOwn(BigIntArrayConstructorsList, klass);\n};\n\nvar aTypedArray = function (it) {\n  if (isTypedArray(it)) return it;\n  throw new TypeError('Target is not a typed array');\n};\n\nvar aTypedArrayConstructor = function (C) {\n  if (isCallable(C) && (!setPrototypeOf || isPrototypeOf(TypedArray, C))) return C;\n  throw new TypeError(tryToString(C) + ' is not a typed array constructor');\n};\n\nvar exportTypedArrayMethod = function (KEY, property, forced, options) {\n  if (!DESCRIPTORS) return;\n  if (forced) for (var ARRAY in TypedArrayConstructorsList) {\n    var TypedArrayConstructor = global[ARRAY];\n    if (TypedArrayConstructor && hasOwn(TypedArrayConstructor.prototype, KEY)) try {\n      delete TypedArrayConstructor.prototype[KEY];\n    } catch (error) {\n      // old WebKit bug - some methods are non-configurable\n      try {\n        TypedArrayConstructor.prototype[KEY] = property;\n      } catch (error2) { /* empty */ }\n    }\n  }\n  if (!TypedArrayPrototype[KEY] || forced) {\n    defineBuiltIn(TypedArrayPrototype, KEY, forced ? property\n      : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property, options);\n  }\n};\n\nvar exportTypedArrayStaticMethod = function (KEY, property, forced) {\n  var ARRAY, TypedArrayConstructor;\n  if (!DESCRIPTORS) return;\n  if (setPrototypeOf) {\n    if (forced) for (ARRAY in TypedArrayConstructorsList) {\n      TypedArrayConstructor = global[ARRAY];\n      if (TypedArrayConstructor && hasOwn(TypedArrayConstructor, KEY)) try {\n        delete TypedArrayConstructor[KEY];\n      } catch (error) { /* empty */ }\n    }\n    if (!TypedArray[KEY] || forced) {\n      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable\n      try {\n        return defineBuiltIn(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && TypedArray[KEY] || property);\n      } catch (error) { /* empty */ }\n    } else return;\n  }\n  for (ARRAY in TypedArrayConstructorsList) {\n    TypedArrayConstructor = global[ARRAY];\n    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {\n      defineBuiltIn(TypedArrayConstructor, KEY, property);\n    }\n  }\n};\n\nfor (NAME in TypedArrayConstructorsList) {\n  Constructor = global[NAME];\n  Prototype = Constructor && Constructor.prototype;\n  if (Prototype) enforceInternalState(Prototype)[TYPED_ARRAY_CONSTRUCTOR] = Constructor;\n  else NATIVE_ARRAY_BUFFER_VIEWS = false;\n}\n\nfor (NAME in BigIntArrayConstructorsList) {\n  Constructor = global[NAME];\n  Prototype = Constructor && Constructor.prototype;\n  if (Prototype) enforceInternalState(Prototype)[TYPED_ARRAY_CONSTRUCTOR] = Constructor;\n}\n\n// WebKit bug - typed arrays constructors prototype is Object.prototype\nif (!NATIVE_ARRAY_BUFFER_VIEWS || !isCallable(TypedArray) || TypedArray === Function.prototype) {\n  // eslint-disable-next-line no-shadow -- safe\n  TypedArray = function TypedArray() {\n    throw new TypeError('Incorrect invocation');\n  };\n  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {\n    if (global[NAME]) setPrototypeOf(global[NAME], TypedArray);\n  }\n}\n\nif (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {\n  TypedArrayPrototype = TypedArray.prototype;\n  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {\n    if (global[NAME]) setPrototypeOf(global[NAME].prototype, TypedArrayPrototype);\n  }\n}\n\n// WebKit bug - one more object in Uint8ClampedArray prototype chain\nif (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {\n  setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);\n}\n\nif (DESCRIPTORS && !hasOwn(TypedArrayPrototype, TO_STRING_TAG)) {\n  TYPED_ARRAY_TAG_REQUIRED = true;\n  defineBuiltInAccessor(TypedArrayPrototype, TO_STRING_TAG, {\n    configurable: true,\n    get: function () {\n      return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;\n    }\n  });\n  for (NAME in TypedArrayConstructorsList) if (global[NAME]) {\n    createNonEnumerableProperty(global[NAME], TYPED_ARRAY_TAG, NAME);\n  }\n}\n\nmodule.exports = {\n  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,\n  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQUIRED && TYPED_ARRAY_TAG,\n  aTypedArray: aTypedArray,\n  aTypedArrayConstructor: aTypedArrayConstructor,\n  exportTypedArrayMethod: exportTypedArrayMethod,\n  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,\n  getTypedArrayConstructor: getTypedArrayConstructor,\n  isView: isView,\n  isTypedArray: isTypedArray,\n  TypedArray: TypedArray,\n  TypedArrayPrototype: TypedArrayPrototype\n};\n","'use strict';\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\n\nmodule.exports = function (Constructor, list, $length) {\n  var index = 0;\n  var length = arguments.length > 2 ? $length : lengthOfArrayLike(list);\n  var result = new Constructor(length);\n  while (length > index) result[index] = list[index++];\n  return result;\n};\n","'use strict';\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\n\n// https://tc39.es/proposal-change-array-by-copy/#sec-array.prototype.toReversed\n// https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.toReversed\nmodule.exports = function (O, C) {\n  var len = lengthOfArrayLike(O);\n  var A = new C(len);\n  var k = 0;\n  for (; k < len; k++) A[k] = O[len - k - 1];\n  return A;\n};\n","'use strict';\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar $RangeError = RangeError;\n\n// https://tc39.es/proposal-change-array-by-copy/#sec-array.prototype.with\n// https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.with\nmodule.exports = function (O, C, index, value) {\n  var len = lengthOfArrayLike(O);\n  var relativeIndex = toIntegerOrInfinity(index);\n  var actualIndex = relativeIndex < 0 ? len + relativeIndex : relativeIndex;\n  if (actualIndex >= len || actualIndex < 0) throw new $RangeError('Incorrect index');\n  var A = new C(len);\n  var k = 0;\n  for (; k < len; k++) A[k] = k === actualIndex ? value : O[k];\n  return A;\n};\n","'use strict';\nvar TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar isCallable = require('../internals/is-callable');\nvar classofRaw = require('../internals/classof-raw');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar $Object = Object;\n\n// ES3 wrong here\nvar CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) === 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (error) { /* empty */ }\n};\n\n// getting tag from ES6+ `Object.prototype.toString`\nmodule.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {\n  var O, tag, result;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == 'string' ? tag\n    // builtinTag case\n    : CORRECT_ARGUMENTS ? classofRaw(O)\n    // ES3 arguments fallback\n    : (result = classofRaw(O)) === 'Object' && isCallable(O.callee) ? 'Arguments' : result;\n};\n","'use strict';\nvar fails = require('../internals/fails');\n\nmodule.exports = !fails(function () {\n  function F() { /* empty */ }\n  F.prototype.constructor = null;\n  // eslint-disable-next-line es/no-object-getprototypeof -- required for testing\n  return Object.getPrototypeOf(new F()) !== F.prototype;\n});\n","'use strict';\nvar makeBuiltIn = require('../internals/make-built-in');\nvar defineProperty = require('../internals/object-define-property');\n\nmodule.exports = function (target, name, descriptor) {\n  if (descriptor.get) makeBuiltIn(descriptor.get, name, { getter: true });\n  if (descriptor.set) makeBuiltIn(descriptor.set, name, { setter: true });\n  return defineProperty.f(target, name, descriptor);\n};\n","'use strict';\nmodule.exports = {\n  IndexSizeError: { s: 'INDEX_SIZE_ERR', c: 1, m: 1 },\n  DOMStringSizeError: { s: 'DOMSTRING_SIZE_ERR', c: 2, m: 0 },\n  HierarchyRequestError: { s: 'HIERARCHY_REQUEST_ERR', c: 3, m: 1 },\n  WrongDocumentError: { s: 'WRONG_DOCUMENT_ERR', c: 4, m: 1 },\n  InvalidCharacterError: { s: 'INVALID_CHARACTER_ERR', c: 5, m: 1 },\n  NoDataAllowedError: { s: 'NO_DATA_ALLOWED_ERR', c: 6, m: 0 },\n  NoModificationAllowedError: { s: 'NO_MODIFICATION_ALLOWED_ERR', c: 7, m: 1 },\n  NotFoundError: { s: 'NOT_FOUND_ERR', c: 8, m: 1 },\n  NotSupportedError: { s: 'NOT_SUPPORTED_ERR', c: 9, m: 1 },\n  InUseAttributeError: { s: 'INUSE_ATTRIBUTE_ERR', c: 10, m: 1 },\n  InvalidStateError: { s: 'INVALID_STATE_ERR', c: 11, m: 1 },\n  SyntaxError: { s: 'SYNTAX_ERR', c: 12, m: 1 },\n  InvalidModificationError: { s: 'INVALID_MODIFICATION_ERR', c: 13, m: 1 },\n  NamespaceError: { s: 'NAMESPACE_ERR', c: 14, m: 1 },\n  InvalidAccessError: { s: 'INVALID_ACCESS_ERR', c: 15, m: 1 },\n  ValidationError: { s: 'VALIDATION_ERR', c: 16, m: 0 },\n  TypeMismatchError: { s: 'TYPE_MISMATCH_ERR', c: 17, m: 1 },\n  SecurityError: { s: 'SECURITY_ERR', c: 18, m: 1 },\n  NetworkError: { s: 'NETWORK_ERR', c: 19, m: 1 },\n  AbortError: { s: 'ABORT_ERR', c: 20, m: 1 },\n  URLMismatchError: { s: 'URL_MISMATCH_ERR', c: 21, m: 1 },\n  QuotaExceededError: { s: 'QUOTA_EXCEEDED_ERR', c: 22, m: 1 },\n  TimeoutError: { s: 'TIMEOUT_ERR', c: 23, m: 1 },\n  InvalidNodeTypeError: { s: 'INVALID_NODE_TYPE_ERR', c: 24, m: 1 },\n  DataCloneError: { s: 'DATA_CLONE_ERR', c: 25, m: 1 }\n};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar $Error = Error;\nvar replace = uncurryThis(''.replace);\n\nvar TEST = (function (arg) { return String(new $Error(arg).stack); })('zxcasd');\n// eslint-disable-next-line redos/no-vulnerable -- safe\nvar V8_OR_CHAKRA_STACK_ENTRY = /\\n\\s*at [^:]*:[^\\n]*/;\nvar IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);\n\nmodule.exports = function (stack, dropEntries) {\n  if (IS_V8_OR_CHAKRA_STACK && typeof stack == 'string' && !$Error.prepareStackTrace) {\n    while (dropEntries--) stack = replace(stack, V8_OR_CHAKRA_STACK_ENTRY, '');\n  } return stack;\n};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar aCallable = require('../internals/a-callable');\n\nmodule.exports = function (object, key, method) {\n  try {\n    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\n    return uncurryThis(aCallable(Object.getOwnPropertyDescriptor(object, key)[method]));\n  } catch (error) { /* empty */ }\n};\n","'use strict';\nvar isCallable = require('../internals/is-callable');\nvar isObject = require('../internals/is-object');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\n\n// makes subclassing work correct for wrapped built-ins\nmodule.exports = function ($this, dummy, Wrapper) {\n  var NewTarget, NewTargetPrototype;\n  if (\n    // it can work only with native `setPrototypeOf`\n    setPrototypeOf &&\n    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this\n    isCallable(NewTarget = dummy.constructor) &&\n    NewTarget !== Wrapper &&\n    isObject(NewTargetPrototype = NewTarget.prototype) &&\n    NewTargetPrototype !== Wrapper.prototype\n  ) setPrototypeOf($this, NewTargetPrototype);\n  return $this;\n};\n","'use strict';\nvar classof = require('../internals/classof');\n\nmodule.exports = function (it) {\n  var klass = classof(it);\n  return klass === 'BigInt64Array' || klass === 'BigUint64Array';\n};\n","'use strict';\nvar isObject = require('../internals/is-object');\n\nmodule.exports = function (argument) {\n  return isObject(argument) || argument === null;\n};\n","'use strict';\nvar toString = require('../internals/to-string');\n\nmodule.exports = function (argument, $default) {\n  return argument === undefined ? arguments.length < 2 ? '' : $default : toString(argument);\n};\n","'use strict';\nvar hasOwn = require('../internals/has-own-property');\nvar isCallable = require('../internals/is-callable');\nvar toObject = require('../internals/to-object');\nvar sharedKey = require('../internals/shared-key');\nvar CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');\n\nvar IE_PROTO = sharedKey('IE_PROTO');\nvar $Object = Object;\nvar ObjectPrototype = $Object.prototype;\n\n// `Object.getPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.getprototypeof\n// eslint-disable-next-line es/no-object-getprototypeof -- safe\nmodule.exports = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function (O) {\n  var object = toObject(O);\n  if (hasOwn(object, IE_PROTO)) return object[IE_PROTO];\n  var constructor = object.constructor;\n  if (isCallable(constructor) && object instanceof constructor) {\n    return constructor.prototype;\n  } return object instanceof $Object ? ObjectPrototype : null;\n};\n","'use strict';\n/* eslint-disable no-proto -- safe */\nvar uncurryThisAccessor = require('../internals/function-uncurry-this-accessor');\nvar anObject = require('../internals/an-object');\nvar aPossiblePrototype = require('../internals/a-possible-prototype');\n\n// `Object.setPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.setprototypeof\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n// eslint-disable-next-line es/no-object-setprototypeof -- safe\nmodule.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {\n  var CORRECT_SETTER = false;\n  var test = {};\n  var setter;\n  try {\n    setter = uncurryThisAccessor(Object.prototype, '__proto__', 'set');\n    setter(test, []);\n    CORRECT_SETTER = test instanceof Array;\n  } catch (error) { /* empty */ }\n  return function setPrototypeOf(O, proto) {\n    anObject(O);\n    aPossiblePrototype(proto);\n    if (CORRECT_SETTER) setter(O, proto);\n    else O.__proto__ = proto;\n    return O;\n  };\n}() : undefined);\n","'use strict';\nvar toPrimitive = require('../internals/to-primitive');\n\nvar $TypeError = TypeError;\n\n// `ToBigInt` abstract operation\n// https://tc39.es/ecma262/#sec-tobigint\nmodule.exports = function (argument) {\n  var prim = toPrimitive(argument, 'number');\n  if (typeof prim == 'number') throw new $TypeError(\"Can't convert number to bigint\");\n  // eslint-disable-next-line es/no-bigint -- safe\n  return BigInt(prim);\n};\n","'use strict';\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar test = {};\n\ntest[TO_STRING_TAG] = 'z';\n\nmodule.exports = String(test) === '[object z]';\n","'use strict';\nvar classof = require('../internals/classof');\n\nvar $String = String;\n\nmodule.exports = function (argument) {\n  if (classof(argument) === 'Symbol') throw new TypeError('Cannot convert a Symbol value to a string');\n  return $String(argument);\n};\n","'use strict';\nvar arrayToReversed = require('../internals/array-to-reversed');\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\nvar getTypedArrayConstructor = ArrayBufferViewCore.getTypedArrayConstructor;\n\n// `%TypedArray%.prototype.toReversed` method\n// https://tc39.es/ecma262/#sec-%typedarray%.prototype.toreversed\nexportTypedArrayMethod('toReversed', function toReversed() {\n  return arrayToReversed(aTypedArray(this), getTypedArrayConstructor(this));\n});\n","'use strict';\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar aCallable = require('../internals/a-callable');\nvar arrayFromConstructorAndList = require('../internals/array-from-constructor-and-list');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar getTypedArrayConstructor = ArrayBufferViewCore.getTypedArrayConstructor;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\nvar sort = uncurryThis(ArrayBufferViewCore.TypedArrayPrototype.sort);\n\n// `%TypedArray%.prototype.toSorted` method\n// https://tc39.es/ecma262/#sec-%typedarray%.prototype.tosorted\nexportTypedArrayMethod('toSorted', function toSorted(compareFn) {\n  if (compareFn !== undefined) aCallable(compareFn);\n  var O = aTypedArray(this);\n  var A = arrayFromConstructorAndList(getTypedArrayConstructor(O), O);\n  return sort(A, compareFn);\n});\n","'use strict';\nvar arrayWith = require('../internals/array-with');\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar isBigIntArray = require('../internals/is-big-int-array');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar toBigInt = require('../internals/to-big-int');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar getTypedArrayConstructor = ArrayBufferViewCore.getTypedArrayConstructor;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n\nvar PROPER_ORDER = !!function () {\n  try {\n    // eslint-disable-next-line no-throw-literal, es/no-typed-arrays, es/no-array-prototype-with -- required for testing\n    new Int8Array(1)['with'](2, { valueOf: function () { throw 8; } });\n  } catch (error) {\n    // some early implementations, like WebKit, does not follow the final semantic\n    // https://github.com/tc39/proposal-change-array-by-copy/pull/86\n    return error === 8;\n  }\n}();\n\n// `%TypedArray%.prototype.with` method\n// https://tc39.es/ecma262/#sec-%typedarray%.prototype.with\nexportTypedArrayMethod('with', { 'with': function (index, value) {\n  var O = aTypedArray(this);\n  var relativeIndex = toIntegerOrInfinity(index);\n  var actualValue = isBigIntArray(O) ? toBigInt(value) : +value;\n  return arrayWith(O, getTypedArrayConstructor(O), relativeIndex, actualValue);\n} }['with'], !PROPER_ORDER);\n","'use strict';\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar getBuiltIn = require('../internals/get-built-in');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar defineProperty = require('../internals/object-define-property').f;\nvar hasOwn = require('../internals/has-own-property');\nvar anInstance = require('../internals/an-instance');\nvar inheritIfRequired = require('../internals/inherit-if-required');\nvar normalizeStringArgument = require('../internals/normalize-string-argument');\nvar DOMExceptionConstants = require('../internals/dom-exception-constants');\nvar clearErrorStack = require('../internals/error-stack-clear');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar IS_PURE = require('../internals/is-pure');\n\nvar DOM_EXCEPTION = 'DOMException';\nvar Error = getBuiltIn('Error');\nvar NativeDOMException = getBuiltIn(DOM_EXCEPTION);\n\nvar $DOMException = function DOMException() {\n  anInstance(this, DOMExceptionPrototype);\n  var argumentsLength = arguments.length;\n  var message = normalizeStringArgument(argumentsLength < 1 ? undefined : arguments[0]);\n  var name = normalizeStringArgument(argumentsLength < 2 ? undefined : arguments[1], 'Error');\n  var that = new NativeDOMException(message, name);\n  var error = new Error(message);\n  error.name = DOM_EXCEPTION;\n  defineProperty(that, 'stack', createPropertyDescriptor(1, clearErrorStack(error.stack, 1)));\n  inheritIfRequired(that, this, $DOMException);\n  return that;\n};\n\nvar DOMExceptionPrototype = $DOMException.prototype = NativeDOMException.prototype;\n\nvar ERROR_HAS_STACK = 'stack' in new Error(DOM_EXCEPTION);\nvar DOM_EXCEPTION_HAS_STACK = 'stack' in new NativeDOMException(1, 2);\n\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar descriptor = NativeDOMException && DESCRIPTORS && Object.getOwnPropertyDescriptor(global, DOM_EXCEPTION);\n\n// Bun ~ 0.1.1 DOMException have incorrect descriptor and we can't redefine it\n// https://github.com/Jarred-Sumner/bun/issues/399\nvar BUGGY_DESCRIPTOR = !!descriptor && !(descriptor.writable && descriptor.configurable);\n\nvar FORCED_CONSTRUCTOR = ERROR_HAS_STACK && !BUGGY_DESCRIPTOR && !DOM_EXCEPTION_HAS_STACK;\n\n// `DOMException` constructor patch for `.stack` where it's required\n// https://webidl.spec.whatwg.org/#es-DOMException-specialness\n$({ global: true, constructor: true, forced: IS_PURE || FORCED_CONSTRUCTOR }, { // TODO: fix export logic\n  DOMException: FORCED_CONSTRUCTOR ? $DOMException : NativeDOMException\n});\n\nvar PolyfilledDOMException = getBuiltIn(DOM_EXCEPTION);\nvar PolyfilledDOMExceptionPrototype = PolyfilledDOMException.prototype;\n\nif (PolyfilledDOMExceptionPrototype.constructor !== PolyfilledDOMException) {\n  if (!IS_PURE) {\n    defineProperty(PolyfilledDOMExceptionPrototype, 'constructor', createPropertyDescriptor(1, PolyfilledDOMException));\n  }\n\n  for (var key in DOMExceptionConstants) if (hasOwn(DOMExceptionConstants, key)) {\n    var constant = DOMExceptionConstants[key];\n    var constantName = constant.s;\n    if (!hasOwn(PolyfilledDOMException, constantName)) {\n      defineProperty(PolyfilledDOMException, constantName, createPropertyDescriptor(6, constant.c));\n    }\n  }\n}\n"],"names":["t","e","module","exports","this","n","r","i","s","u","a","o","c","f","h","d","l","$","y","M","name","weekdays","split","months","ordinal","m","String","length","Array","join","v","z","utcOffset","Math","abs","floor","date","year","month","clone","add","ceil","p","w","D","ms","Q","toLowerCase","replace","g","S","_","O","args","arguments","b","locale","$L","utc","$u","x","$x","$offset","parse","prototype","$d","Date","NaN","test","match","substring","UTC","init","$y","getFullYear","$M","getMonth","$D","getDate","$W","getDay","$H","getHours","$m","getMinutes","$s","getSeconds","$ms","getMilliseconds","$utils","isValid","toString","isSame","startOf","endOf","isAfter","isBefore","$g","set","unix","valueOf","getTime","toDate","apply","slice","$locale","weekStart","$set","min","daysInMonth","get","Number","round","subtract","format","invalidDate","meridiem","monthsShort","weekdaysMin","weekdaysShort","getTimezoneOffset","diff","toJSON","toISOString","toUTCString","k","forEach","extend","$i","isDayjs","en","Ls","_hoisted_1","class","render","_ctx","_cache","$props","$setup","$data","$options","_component_MessageInfo","_resolveComponent","_component_MessageContainer","_component_MessageInput","_openBlock","_createElementBlock","_createVNode","username","messages","_defineComponent","__name","props","type","required","setup","__props","_createElementVNode","_toDisplayString","toUpperCase","__exports__","_hoisted_2","key","_hoisted_3","messageContainer","ref","watch","scrollToEnd","nextTick","value","scrollTo","top","offsetHeight","ref_key","_Fragment","_renderList","_normalizeClass","message","_createCommentVNode","CONSTANTS","NODE_CLIENT","NODE_ADMIN","SDK_VERSION","assert","assertion","assertionError","Error","stringToByteArray$1","str","out","charCodeAt","byteArrayToString","bytes","pos","c1","fromCharCode","c2","c3","c4","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","push","encodeString","btoa","decodeString","decodeStringToByteArray","charToByteMap","charAt","haveByte4","byte4","DecodeBase64StringError","constructor","base64Encode","utf8Bytes","base64urlEncodeWithoutPadding","base64Decode","console","error","deepCopy","deepExtend","undefined","target","source","Object","dateValue","prop","hasOwnProperty","isValidKey","getGlobal","self","window","global","getDefaultsFromGlobal","__FIREBASE_DEFAULTS__","getDefaultsFromEnvVariable","process","defaultsJsonString","JSON","getDefaultsFromCookie","document","cookie","decoded","getDefaults","info","getDefaultEmulatorHost","productName","_a","_b","emulatorHosts","getDefaultEmulatorHostnameAndPort","host","separatorIndex","lastIndexOf","port","parseInt","getDefaultAppConfig","config","Deferred","reject","resolve","promise","Promise","wrapCallback","callback","catch","createMockUserToken","token","projectId","uid","header","alg","project","iat","sub","user_id","payload","assign","iss","aud","exp","auth_time","firebase","sign_in_provider","identities","signature","stringify","getUA","navigator","isMobileCordova","isReactNative","isNodeSdk","isIndexedDBAvailable","indexedDB","validateIndexedDBOpenable","preExist","DB_CHECK_NAME","request","open","onsuccess","result","close","deleteDatabase","onupgradeneeded","onerror","ERROR_NAME","FirebaseError","code","customData","super","setPrototypeOf","captureStackTrace","ErrorFactory","create","service","serviceName","errors","data","fullCode","template","replaceTemplate","fullMessage","PATTERN","jsonEval","decode","claims","parts","isValidFormat","isAdmin","contains","obj","call","safeGet","isEmpty","map","fn","contextObj","res","deepEqual","aKeys","keys","bKeys","includes","aProp","bProp","isObject","thing","querystring","querystringParams","params","entries","arrayVal","encodeURIComponent","Sha1","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","reset","compress_","buf","offset","W","update","lengthMinusBlock","inbuf","digest","totalBits","j","errorPrefix","fnName","argName","stringToByteArray","high","low","stringLength","getModularInstance","_delegate","Component","instanceFactory","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","setInstanceCreatedCallback","DEFAULT_ENTRY_NAME","Provider","container","component","instances","Map","instancesDeferred","instancesOptions","onInitCallbacks","identifier","normalizedIdentifier","normalizeInstanceIdentifier","has","deferred","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","getImmediate","options","optional","getComponent","setComponent","isComponentEager","instanceDeferred","clearInstance","delete","services","from","values","all","filter","INTERNAL","_delete","isComponentSet","getOptions","initialize","opts","normalizedDeferredIdentifier","onInit","existingCallbacks","Set","existingInstance","invokeOnInitCallbacks","callbacks","normalizeIdentifierForFactory","ComponentContainer","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","logLevel","now","method","Logger","_logLevel","_logHandler","_userLogHandler","val","TypeError","setLogLevel","logHandler","userLogHandler","debug","log","warn","instanceOfAny","object","constructors","some","idbProxyableTypes","cursorAdvanceMethods","getIdbProxyableTypes","IDBDatabase","IDBObjectStore","IDBIndex","IDBCursor","IDBTransaction","getCursorAdvanceMethods","advance","continue","continuePrimaryKey","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","promisifyRequest","unlisten","removeEventListener","success","wrap","addEventListener","then","cacheDonePromiseForTransaction","tx","done","complete","DOMException","idbProxyTraps","receiver","objectStoreNames","objectStore","replaceTraps","wrapFunction","func","transaction","unwrap","storeNames","sort","transformCachableValue","Proxy","IDBRequest","newValue","openDB","version","blocked","upgrade","blocking","terminated","openPromise","event","oldVersion","newVersion","db","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","async","storeName","store","index","shift","oldTraps","PlatformLoggerServiceImpl","getPlatformInfoString","isVersionServiceProvider","library","logString","logger","PLATFORM_LOG_STRING","name$o","name$n","name$l","name$m","name$j","name$k","name$i","name$h","name$g","name$f","name$e","name$d","name$c","name$b","name$a","name$9","name$8","name$7","name$6","name$5","name$4","name$3","name$2","name$1","_apps","_components","_addComponent","app","_registerComponent","componentName","_getProvider","heartbeatController","triggerHeartbeat","ERRORS","ERROR_FACTORY","FirebaseAppImpl","_isDeleted","_options","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","appName","initializeApp","rawConfig","existingApp","newApp","getApp","registerVersion","libraryKeyOrName","variant","libraryMismatch","versionMismatch","warning","DB_NAME","DB_VERSION","STORE_NAME","dbPromise","getDbPromise","createObjectStore","originalErrorMessage","readHeartbeatsFromIndexedDB","computeKey","idbGetError","writeHeartbeatsToIndexedDB","heartbeatObject","put","appId","MAX_HEADER_BYTES","STORED_HEARTBEAT_RETENTION_MAX_MILLIS","HeartbeatServiceImpl","_heartbeatsCache","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","platformLogger","agent","getUTCDateString","heartbeats","lastSentHeartbeatDate","singleDateHeartbeat","hbTimestamp","overwrite","getHeartbeatsHeader","heartbeatsToSend","unsentEntries","extractHeartbeatsForHeader","headerString","today","heartbeatsCache","maxSize","heartbeatEntry","find","hb","dates","countBytes","pop","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","canUseIndexedDB","idbHeartbeatObject","heartbeatsObject","existingHeartbeatsObject","registerCoreComponents","version$1","setSDKVersion","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","remove","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","sha1Bytes","buildLogMessage_","varArgs","arg","firstLog_","enableLogging$1","logger_","persistent","bind","logWrapper","prefix","fatal","warnIfPageIsSecure","location","protocol","indexOf","isInvalidJSONNumber","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","readyState","called","wrappedFn","body","setTimeout","attachEvent","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","splitStringBySize","segsize","len","dataSegs","each","doubleToIEEE754String","ebits","fbits","bias","ln","Infinity","pow","LN2","bits","reverse","hexByteString","hexByte","substr","isChromeExtensionContentScript","href","isWindowsStoreApp","Windows","UI","errorForServerCode","query","reason","_path","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","Deno","unrefTimer","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getToken","forceRefresh","addTokenChangeListener","listener","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","auth","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN_RE","LAST_SESSION_PARAM","APPLICATION_ID_PARAM","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","isUsingEmulator","_host","_domain","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","repoInfoNeedsQueryParam","repoInfo","repoInfoConnectionURL","connURL","pairs","StatsCollection","counters_","incrementCounter","amount","collections","reporters","statsManagerGetCollection","hashString","statsManagerGetOrCreateReporter","creatorFunction","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","markConnectionHealthy","shutdown_","myDisconnFrame","removeChild","send","dataStr","base64data","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","script","currentDomain","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","textContent","myID","myPW","newRequest_","size","theURL","curDataString","nextSeg","theSeg","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript","onload","onreadystatechange","rstate","parentNode","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","headers","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","handleIncomingFrame","isOldAndroid","oldAndroidRegex","oldAndroidMatch","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","transport","initialTransport","upgradeTransport","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","handshakePayload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","pathString","onComplete","hash","merge","refreshAuthToken","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","context","on","validateEventType_","eventData","getInitialEvent","off","splice","et","OnlineMonitor","online_","getInstance","currentlyOnline","MAX_PATH_DEPTH","MAX_PATH_LENGTH_BYTES","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathToUrlEncodedString","pathSlice","begin","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathEquals","other","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPathPush","validationPath","child","validationPathPop","last","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_TOKEN_THRESHOLD","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","onVisible_","onOnline_","action","onResponse","curReqNum","initConnection_","q","_queryObject","outstandingGet","sendGet_","listen","currentHashFn","tag","queryId","_queryIdentifier","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","tryAppCheck","authMethod","requestData","cred","onAuthRevoked_","onAppCheckRevoked_","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","interrupt","resume","delta","serverTimeOffset","normalizedPathString","statusCode","explanation","queries","clientName","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","cmp","left","right","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","setMaxNode$1","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON$1","MAX_NODE$1","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","setNodeFromJSON","setMaxNode","PriorityIndex","aPriority","bPriority","indexCmp","PRIORITY_INDEX","LOG_2","Base12Num","logBase2","num","bitMask","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","newIndex","next","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","USE_HINZE","nodeFromJSON","json","jsonLeaf","childData","children","childrenHavePriority","hinzeJsonObj","childSet","sortedChildSet","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","ValueIndex","VALUE_INDEX","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","changeChildMoved","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","startIsInclusive_","startAfterSet_","endIsInclusive_","endBeforeSet_","getStartPost","getEndPost","matches","isWithinStart","isWithinEnd","filtered","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","withinDirectionalStart","reverse_","withinEndPost","withinStartPost","withinDirectionalEnd","compareRes","rangedFilter_","limit_","getLimit","isViewFromLeft","fullLimitUpdateChild_","inRange","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","oldChildSnap","nextChild","getChildAfterChild","compareNext","remainsInWindow","newEventCache","nextChildInRange","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasLimit","hasAnchoredLimit","queryParamsGetNodeFilter","queryParams","queryParamsToRestQueryStringParameters","qs","orderBy","startParam","endParam","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","getListenId_","listenId","thisListen","queryStringParameters","restRequest_","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForEachTree","prefixPath","sparseSnapshotTreeForEachChild","tree","StatsListener","collection_","last_","newStats","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceUser","fromUser","fromServer","tagged","newOperationSourceServer","newOperationSourceServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForChanges","eventGenerator","changes","eventCache","eventRegistrations","events","moves","change","eventGeneratorGenerateEventsForType","registrations","filteredChanges","eventGeneratorCompareChanges","materializedChange","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","prevName","aWrapped","bWrapped","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","EmptyChildren","ImmutableTree","fromObject","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","fullPath","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","empty","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeAddOverwrite","writeId","lastWriteId","allWrites","visibleWrites","writeTreeGetWrite","record","writeTreeRemoveWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","writeTreeResetTree_","writeRecord","writeTreeLayerTree_","writeTreeDefaultFilter_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","mergeAtPath","layeredCache","subMerge","writeTreeCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcCompleteChild","writeTreeShadowingWrite","writeTreeCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeRefCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","NoCompleteChildSource_","getCompleteChild","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","newViewProcessor","viewProcessorAssertIndexed","viewProcessor","viewProcessorApplyOperation","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","viewProcessorRevertUserWrite","viewProcessorAckUserWrite","viewProcessorListenComplete","viewProcessorMaybeAddValueEvent","isLeafOrEmpty","oldCompleteSnap","viewProcessorGenerateEventCacheAfterServerEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","newEventSnap","viewProcessorCacheHasChild","changedChildren","curViewCache","viewProcessorApplyMerge","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","mergePath","serverCachePath","oldServerNode","serverChildren","View","initialViewCache","eventRegistrations_","indexFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","viewGetServerCache","view","viewGetCompleteServerCache","cache","viewIsEmpty","viewAddEventRegistration","eventRegistration","viewRemoveEventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","viewGetInitialEvents","initialChanges","eventNode","referenceConstructor$1","referenceConstructor","SyncPoint","views","syncPointSetReferenceConstructor","syncPointGetReferenceConstructor","syncPointIsEmpty","syncPoint","syncPointApplyOperation","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncTreeSetReferenceConstructor","syncTreeGetReferenceConstructor","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","syncTreeApplyOperationToSyncPoints_","syncTreeAckUserWrite","needToReevaluate","syncTreeApplyServerOverwrite","syncTreeApplyServerMerge","changeTree","syncTreeApplyListenComplete","syncTreeApplyTaggedListenComplete","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","op","syncTreeApplyTaggedOperation_","syncTreeRemoveEventRegistration","skipListenerDedup","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyTaggedQueryMerge","syncTreeAddEventRegistration","skipSetupListener","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","syncTreeGetNextQueryTag_","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","includeHiddenSets","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","splitIndex","maybeChildSyncPoint","childMap","completeView","_key","childViews","removedQuery","removedQueryKey","removedQueryTag","queriesToStop","childQueries","queryToStop","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","unused","existingNode","leaf","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeIsEmpty","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeForEachAncestor","treeGetPath","treeUpdateChild","childEmpty","childExists","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidPathString","isValidRootPathString","validateFirebaseDataArg","validateFirebaseData","hasDotValue","hasActualChild","validatePathString","argumentName","validateRootPathString","validateWritablePath","validateUrl","parsedUrl","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","authOverride","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoOnServerInfoUpdate","statsReporter_","infoData_","infoSyncTree_","infoEvents","repoUpdateInfo","serverSyncTree_","repoServerTime","offsetNode","repoGenerateServerValues","taggedChildren","raw","taggedSnap","repoRerunTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoSetWithPriority","newVal","repoLog","newNodeUnresolved","clearEvents","repoCallOnCompleteCallback","repoAbortTransactions","resolvedOnDisconnectTree","resolved","repoAddEventCallbackForQuery","repoRemoveEventCallbackForQuery","repoInterrupt","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","allRun","every","repoSendTransactionQueue","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","currentOutputSnapshotResolved","unwatcher","abortReason","rootMostTransactionNode","repoGetAncestorTransactionNode","repoRerunTransactionQueue","txnsToRerun","abortTransaction","currentNode","currentInputSnapshot","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","applyLocally","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","repoAbortTransactionsOnNode","lastSent","decodePath","pathStringDecoded","piece","decodeURIComponent","decodeQuery","queryString","results","segment","kv","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","colonInd","slashInd","questionMarkInd","hostWithoutPort","dotInd","PUSH_CHARS","lastPushTime","lastRandChars","DataEvent","snapshot","getEventType","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","onCancel","hasCancelCallback","userCallback","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","sameRepo","samePath","sameQueryIdentifier","parentPath","DataSnapshot","_node","_index","childRef","exists","hasChildren","_checkNotDeleted","_root","ValueEventRegistration","callbackContext","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","FIREBASE_DATABASE_EMULATOR_HOST_VAR","repos","useRestClient","repoManagerApplyEmulatorSettings","tokenProvider","repoManagerDatabaseFromApp","authProvider","dbUrl","databaseURL","isEmulator","dbEmulatorHost","authTokenProvider","repoManagerCreateRepo","Database","repoManagerDeleteRepo","appRepos","_repoInternal","_instanceStarted","_rootInternal","apiName","getDatabase","emulator","connectDatabaseEmulator","mockUserToken","registerDatabase","SDK_VERSION$1","simpleListen","echo","onEcho","randomUUID","crypto","getRandomValues","rnds8","Uint8Array","rng","byteToHex","unsafeStringify","arr","v4","native","rnds","firebaseConfig","apiKey","authDomain","storageBucket","messagingSenderId","measurementId","messagesRef","writeUserData","dayjs","uuidv4","_withScopeId","_pushScopeId","_popScopeId","_hoisted_4","messageInput","sendController","err","toFocusMessageInput","focus","_withDirectives","placeholder","$event","_vModelText","disabled","onClick","components","MessageInfo","MessageContainer","MessageInput","loginTimestamp","onMounted","item","isPossiblePrototype","$String","$TypeError","argument","isPrototypeOf","it","Prototype","ArrayBuffer","DataView","NAME","Constructor","NATIVE_ARRAY_BUFFER","DESCRIPTORS","isCallable","hasOwn","classof","tryToString","createNonEnumerableProperty","defineBuiltIn","defineBuiltInAccessor","getPrototypeOf","wellKnownSymbol","InternalStateModule","enforceInternalState","enforce","getInternalState","Int8Array","Int8ArrayPrototype","Uint8ClampedArray","Uint8ClampedArrayPrototype","TypedArray","TypedArrayPrototype","ObjectPrototype","TO_STRING_TAG","TYPED_ARRAY_TAG","TYPED_ARRAY_CONSTRUCTOR","NATIVE_ARRAY_BUFFER_VIEWS","opera","TYPED_ARRAY_TAG_REQUIRED","TypedArrayConstructorsList","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","BigIntArrayConstructorsList","BigInt64Array","BigUint64Array","isView","klass","getTypedArrayConstructor","proto","state","isTypedArray","aTypedArray","aTypedArrayConstructor","C","exportTypedArrayMethod","KEY","property","forced","ARRAY","TypedArrayConstructor","error2","exportTypedArrayStaticMethod","Function","configurable","lengthOfArrayLike","list","$length","A","toIntegerOrInfinity","$RangeError","RangeError","relativeIndex","actualIndex","TO_STRING_TAG_SUPPORT","classofRaw","$Object","CORRECT_ARGUMENTS","tryGet","callee","fails","F","makeBuiltIn","defineProperty","descriptor","getter","setter","IndexSizeError","DOMStringSizeError","HierarchyRequestError","WrongDocumentError","InvalidCharacterError","NoDataAllowedError","NoModificationAllowedError","NotFoundError","NotSupportedError","InUseAttributeError","InvalidStateError","SyntaxError","InvalidModificationError","NamespaceError","InvalidAccessError","ValidationError","TypeMismatchError","SecurityError","NetworkError","AbortError","URLMismatchError","QuotaExceededError","TimeoutError","InvalidNodeTypeError","DataCloneError","uncurryThis","$Error","TEST","V8_OR_CHAKRA_STACK_ENTRY","IS_V8_OR_CHAKRA_STACK","dropEntries","prepareStackTrace","aCallable","getOwnPropertyDescriptor","$this","dummy","Wrapper","NewTarget","NewTargetPrototype","$default","toObject","sharedKey","CORRECT_PROTOTYPE_GETTER","IE_PROTO","uncurryThisAccessor","anObject","aPossiblePrototype","CORRECT_SETTER","__proto__","toPrimitive","prim","BigInt","arrayToReversed","ArrayBufferViewCore","arrayFromConstructorAndList","compareFn","arrayWith","isBigIntArray","toBigInt","PROPER_ORDER","actualValue","getBuiltIn","createPropertyDescriptor","anInstance","inheritIfRequired","normalizeStringArgument","DOMExceptionConstants","clearErrorStack","IS_PURE","DOM_EXCEPTION","NativeDOMException","$DOMException","DOMExceptionPrototype","argumentsLength","that","ERROR_HAS_STACK","DOM_EXCEPTION_HAS_STACK","BUGGY_DESCRIPTOR","writable","FORCED_CONSTRUCTOR","PolyfilledDOMException","PolyfilledDOMExceptionPrototype","constant","constantName"],"sourceRoot":""}